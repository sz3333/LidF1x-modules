# meta developer: Zeris
import traceback
import subprocess
import os
import sys
import platform
import psutil
import time
import json
import asyncio
from datetime import datetime
from telethon.tl.types import Message
from .. import loader, utils

@loader.tds
class SuperNeofetchMod(loader.Module):
    """–°—É–ø–µ—Ä —É–ª—É—á—à–µ–Ω–Ω—ã–π neofetch —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Ñ—É–Ω–∫—Ü–∏–π"""

    strings = {
        "name": "SuperNeofetch",
        "err": "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ neofetch...</b>\n\n<pre><code class='language-stderr'>{error}</code></pre>",
        "no_neofetch": "ü§î <b>Neofetch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.</b>",
        "info_generated": "üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞</b>",
        "benchmark_started": "üèÉ <b>–ë–µ–Ω—á–º–∞—Ä–∫ –∑–∞–ø—É—â–µ–Ω...</b>",
        "benchmark_complete": "‚úÖ <b>–ë–µ–Ω—á–º–∞—Ä–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {time}s</b>",
        "monitoring_started": "üìä <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω</b>",
        "monitoring_stopped": "‚èπÔ∏è <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>",
        "report_generated": "üìÑ <b>–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω</b>",
        "theme_changed": "üé® <b>–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {theme}</b>",
        "config_saved": "üíæ <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞</b>",
        "config_loaded": "üìÇ <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞</b>",
        "export_complete": "üì§ <b>–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω</b>",
        "comparison_ready": "üîç <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ</b>",
        "alert_configured": "üö® <b>–ê–ª–µ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω</b>",
        "notification_sent": "üì¢ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</b>",
        "optimization_complete": "‚ö° <b>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>",
        "security_scan_done": "üîê <b>–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>",
        "network_info_updated": "üåê <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞</b>",
        "hardware_detected": "üîß <b>–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ</b>",
        "gpu_info_loaded": "üéÆ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ GPU –∑–∞–≥—Ä—É–∂–µ–Ω–∞</b>",
        "disk_analysis_done": "üíø <b>–ê–Ω–∞–ª–∏–∑ –¥–∏—Å–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω</b>",
        "process_analysis_done": "‚öôÔ∏è <b>–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω</b>",
        "log_cleared": "üóëÔ∏è <b>–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã</b>",
        "backup_created": "üíæ <b>–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω</b>",
        "update_available": "üîÑ <b>–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ</b>",
        "custom_ascii_loaded": "üé® <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π ASCII –∑–∞–≥—Ä—É–∂–µ–Ω</b>",
        "plugin_loaded": "üîå <b>–ü–ª–∞–≥–∏–Ω –∑–∞–≥—Ä—É–∂–µ–Ω</b>",
        "api_connected": "üîó <b>API –ø–æ–¥–∫–ª—é—á–µ–Ω</b>",
        "dashboard_ready": "üìä <b>–î–∞—à–±–æ—Ä–¥ –≥–æ—Ç–æ–≤</b>",
        "_cfg_args": "–ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è neofetch",
        "_cfg_theme": "–¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è",
        "_cfg_auto_update": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
        "_cfg_monitoring": "–í–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
        "_cfg_notifications": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
        "_cfg_export_format": "–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞",
        "_cfg_custom_ascii": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π ASCII",
        "_cfg_show_temps": "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã",
        "_cfg_show_network": "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–µ—Ç—å",
        "_cfg_show_processes": "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã",
        "_cfg_refresh_rate": "–ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–µ–∫)",
        "_cfg_log_level": "–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
    }

    strings_ru = {
        "err": "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ neofetch...</b>\n\n<pre><code class='language-stderr'>{error}</code></pre>",
        "no_neofetch": "ü§î <b>Neofetch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.</b>",
        "info_generated": "üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞</b>",
        "benchmark_started": "üèÉ <b>–ë–µ–Ω—á–º–∞—Ä–∫ –∑–∞–ø—É—â–µ–Ω...</b>",
        "benchmark_complete": "‚úÖ <b>–ë–µ–Ω—á–º–∞—Ä–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {time}s</b>",
        "monitoring_started": "üìä <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω</b>",
        "monitoring_stopped": "‚èπÔ∏è <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>",
        "report_generated": "üìÑ <b>–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω</b>",
        "theme_changed": "üé® <b>–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {theme}</b>",
        "config_saved": "üíæ <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞</b>",
        "config_loaded": "üìÇ <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞</b>",
        "export_complete": "üì§ <b>–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω</b>",
        "comparison_ready": "üîç <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ</b>",
        "alert_configured": "üö® <b>–ê–ª–µ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω</b>",
        "notification_sent": "üì¢ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</b>",
        "optimization_complete": "‚ö° <b>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>",
        "security_scan_done": "üîê <b>–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>",
        "network_info_updated": "üåê <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞</b>",
        "hardware_detected": "üîß <b>–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ</b>",
        "gpu_info_loaded": "üéÆ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ GPU –∑–∞–≥—Ä—É–∂–µ–Ω–∞</b>",
        "disk_analysis_done": "üíø <b>–ê–Ω–∞–ª–∏–∑ –¥–∏—Å–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω</b>",
        "process_analysis_done": "‚öôÔ∏è <b>–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω</b>",
        "log_cleared": "üóëÔ∏è <b>–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã</b>",
        "backup_created": "üíæ <b>–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω</b>",
        "update_available": "üîÑ <b>–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ</b>",
        "custom_ascii_loaded": "üé® <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π ASCII –∑–∞–≥—Ä—É–∂–µ–Ω</b>",
        "plugin_loaded": "üîå <b>–ü–ª–∞–≥–∏–Ω –∑–∞–≥—Ä—É–∂–µ–Ω</b>",
        "api_connected": "üîó <b>API –ø–æ–¥–∫–ª—é—á–µ–Ω</b>",
        "dashboard_ready": "üìä <b>–î–∞—à–±–æ—Ä–¥ –≥–æ—Ç–æ–≤</b>",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "args",
                "--ascii_distro auto",
                lambda: self.strings("_cfg_args"),
                validator=loader.validators.Union(
                    loader.validators.String(),
                    loader.validators.NoneType(),
                )
            ),
            loader.ConfigValue(
                "theme",
                "default",
                lambda: self.strings("_cfg_theme"),
                validator=loader.validators.Choice(["default", "minimal", "detailed", "colorful", "dark", "light"])
            ),
            loader.ConfigValue(
                "auto_update",
                True,
                lambda: self.strings("_cfg_auto_update"),
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "monitoring",
                False,
                lambda: self.strings("_cfg_monitoring"),
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "notifications",
                True,
                lambda: self.strings("_cfg_notifications"),
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "export_format",
                "json",
                lambda: self.strings("_cfg_export_format"),
                validator=loader.validators.Choice(["json", "xml", "csv", "html", "txt"])
            ),
            loader.ConfigValue(
                "custom_ascii",
                "",
                lambda: self.strings("_cfg_custom_ascii"),
                validator=loader.validators.String()
            ),
            loader.ConfigValue(
                "show_temps",
                True,
                lambda: self.strings("_cfg_show_temps"),
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "show_network",
                True,
                lambda: self.strings("_cfg_show_network"),
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "show_processes",
                False,
                lambda: self.strings("_cfg_show_processes"),
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "refresh_rate",
                5,
                lambda: self.strings("_cfg_refresh_rate"),
                validator=loader.validators.Integer(minimum=1, maximum=60)
            ),
            loader.ConfigValue(
                "log_level",
                "info",
                lambda: self.strings("_cfg_log_level"),
                validator=loader.validators.Choice(["debug", "info", "warning", "error"])
            )
        )

        # soso
        self.monitoring_active = False
        self.monitoring_task = None
        self.system_history = []
        self.alerts = []
        self.themes = self._load_themes()
        self.plugins = {}
        self.benchmarks = {}
        self.reports = {}

    def _load_themes(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è"""
        return {
            "default": {"colors": ["white", "cyan", "green"], "style": "normal"},
            "minimal": {"colors": ["white"], "style": "minimal"},
            "detailed": {"colors": ["blue", "yellow", "red", "green"], "style": "detailed"},
            "colorful": {"colors": ["red", "orange", "yellow", "green", "blue", "purple"], "style": "rainbow"},
            "dark": {"colors": ["gray", "white"], "style": "dark"},
            "light": {"colors": ["black", "darkblue"], "style": "light"}
        }

    async def client_ready(self, client, db):
        self._client = client
        self._db = db

        # soso
        if self.config["monitoring"]:
            await self._start_monitoring()

    @loader.command(ru_doc=" - –ó–∞–ø—É—Å—Ç–∏—Ç—å neofetch —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏")
    async def neofetch(self, message: Message):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å neofetch —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏"""
        await self._run_neofetch(message)

    @loader.command(ru_doc=" - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ")
    async def sysinfo(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
        info = await self._get_detailed_system_info()

        buttons = [
            [
                {"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "callback": self.refresh_sysinfo, "args": ()},
                {"text": "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "callback": self.toggle_monitoring, "args": ()},
                {"text": "üé® –¢–µ–º–∞", "callback": self.change_theme, "args": ()}
            ],
            [
                {"text": "üì§ –≠–∫—Å–ø–æ—Ä—Ç", "callback": self.export_info, "args": ()},
                {"text": "üèÉ –ë–µ–Ω—á–º–∞—Ä–∫", "callback": self.run_benchmark, "args": ()},
                {"text": "üìÑ –û—Ç—á–µ—Ç", "callback": self.generate_report, "args": ()}
            ],
            [
                {"text": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "callback": self.show_settings, "args": ()},
                {"text": "üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", "callback": self.show_tools, "args": ()},
                {"text": "üìä –ì—Ä–∞—Ñ–∏–∫–∏", "callback": self.show_charts, "args": ()}
            ]
        ]

        await utils.answer(message, info, reply_markup=buttons)

    @loader.command(ru_doc=" - –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã")
    async def startmon(self, message: Message):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã"""
        if not self.monitoring_active:
            await self._start_monitoring()
            await utils.answer(message, self.strings("monitoring_started"))
        else:
            await utils.answer(message, "üìä <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω</b>")

    @loader.command(ru_doc=" - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã")
    async def stopmon(self, message: Message):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã"""
        if self.monitoring_active:
            await self._stop_monitoring()
            await utils.answer(message, self.strings("monitoring_stopped"))
        else:
            await utils.answer(message, "‚èπÔ∏è <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω</b>")

    @loader.command(ru_doc=" - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–µ–Ω—á–º–∞—Ä–∫ —Å–∏—Å—Ç–µ–º—ã")
    async def benchmark(self, message: Message):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–µ–Ω—á–º–∞—Ä–∫ —Å–∏—Å—Ç–µ–º—ã"""
        await utils.answer(message, self.strings("benchmark_started"))

        start_time = time.time()
        benchmark_results = await self._run_benchmark()
        end_time = time.time()

        duration = end_time - start_time

        result_text = f"üèÉ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–Ω—á–º–∞—Ä–∫–∞:</b>\n\n"
        result_text += f"‚è±Ô∏è <b>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b> {duration:.2f}s\n"
        result_text += f"üî• <b>CPU Score:</b> {benchmark_results.get('cpu_score', 'N/A')}\n"
        result_text += f"üíæ <b>Memory Score:</b> {benchmark_results.get('memory_score', 'N/A')}\n"
        result_text += f"üíø <b>Disk Score:</b> {benchmark_results.get('disk_score', 'N/A')}\n"
        result_text += f"üåê <b>Network Score:</b> {benchmark_results.get('network_score', 'N/A')}\n"
        result_text += f"üìä <b>Overall Score:</b> {benchmark_results.get('overall_score', 'N/A')}\n"

        await utils.answer(message, result_text)

    @loader.command(ru_doc=" - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ GPU")
    async def gpuinfo(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ GPU"""
        gpu_info = await self._get_gpu_info()
        await utils.answer(message, gpu_info)

    @loader.command(ru_doc=" - –ê–Ω–∞–ª–∏–∑ –¥–∏—Å–∫–æ–≤")
    async def diskinfo(self, message: Message):
        """–ê–Ω–∞–ª–∏–∑ –¥–∏—Å–∫–æ–≤"""
        disk_info = await self._get_disk_info()
        await utils.answer(message, disk_info)

    @loader.command(ru_doc=" - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏")
    async def netinfo(self, message: Message):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏"""
        net_info = await self._get_network_info()
        await utils.answer(message, net_info)

    @loader.command(ru_doc=" - –¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
    async def topproc(self, message: Message):
        """–¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        proc_info = await self._get_top_processes()
        await utils.answer(message, proc_info)

    @loader.command(ru_doc=" - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    async def temps(self, message: Message):
        """–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        temp_info = await self._get_temperatures()
        await utils.answer(message, temp_info)

    @loader.command(ru_doc=" - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã")
    async def optimize(self, message: Message):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        await utils.answer(message, "‚ö° <b>–ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...</b>")

        optimization_results = await self._run_optimization()

        result_text = "‚ö° <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:</b>\n\n"
        for key, value in optimization_results.items():
            result_text += f"‚Ä¢ {key}: {value}\n"

        await utils.answer(message, result_text)

    @loader.command(ru_doc=" - –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    async def secscan(self, message: Message):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        await utils.answer(message, "üîê <b>–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...</b>")

        security_results = await self._run_security_scan()

        result_text = "üîê <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n"
        for key, value in security_results.items():
            result_text += f"‚Ä¢ {key}: {value}\n"

        await utils.answer(message, result_text)

    @loader.command(ru_doc=" - –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç –æ —Å–∏—Å—Ç–µ–º–µ")
    async def report(self, message: Message):
        """–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç –æ —Å–∏—Å—Ç–µ–º–µ"""
        report_data = await self._generate_system_report()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_id = f"report_{int(time.time())}"
        self.reports[report_id] = report_data

        buttons = [
            [
                {"text": "üì§ –≠–∫—Å–ø–æ—Ä—Ç JSON", "callback": self.export_json, "args": (report_id,)},
                {"text": "üì§ –≠–∫—Å–ø–æ—Ä—Ç HTML", "callback": self.export_html, "args": (report_id,)},
                {"text": "üì§ –≠–∫—Å–ø–æ—Ä—Ç CSV", "callback": self.export_csv, "args": (report_id,)}
            ],
            [
                {"text": "üìä –ì—Ä–∞—Ñ–∏–∫–∏", "callback": self.show_report_charts, "args": (report_id,)},
                {"text": "üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å", "callback": self.send_report, "args": (report_id,)},
                {"text": "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", "callback": self.save_report, "args": (report_id,)}
            ]
        ]

        await utils.answer(message, self.strings("report_generated"), reply_markup=buttons)

    # soso
    async def refresh_sysinfo(self, call):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        info = await self._get_detailed_system_info()
        await call.edit(info)
        await call.answer("üîÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

    async def toggle_monitoring(self, call):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        if self.monitoring_active:
            await self._stop_monitoring()
            await call.answer("‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            await self._start_monitoring()
            await call.answer("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")

    async def change_theme(self, call):
        """–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É"""
        themes = list(self.themes.keys())
        current_theme = self.config["theme"]

        try:
            current_index = themes.index(current_theme)
            next_index = (current_index + 1) % len(themes)
            next_theme = themes[next_index]

            self.config["theme"] = next_theme
            await call.answer(self.strings("theme_changed").format(theme=next_theme))
        except ValueError:
            await call.answer("‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —Ç–µ–º—ã")

    async def export_info(self, call):
        """–≠–∫—Å–ø–æ—Ä—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        await call.answer(self.strings("export_complete"))

    async def run_benchmark(self, call):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–µ–Ω—á–º–∞—Ä–∫"""
        await call.answer("üèÉ –ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞...")
        benchmark_results = await self._run_benchmark()
        await call.answer(f"‚úÖ –ë–µ–Ω—á–º–∞—Ä–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: {benchmark_results.get('overall_score', 'N/A')}")

    async def generate_report(self, call):
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç"""
        await call.answer(self.strings("report_generated"))

    async def show_settings(self, call):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        settings_text = "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n"
        settings_text += f"üé® –¢–µ–º–∞: {self.config['theme']}\n"
        settings_text += f"üîÑ –ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {'‚úÖ' if self.config['auto_update'] else '‚ùå'}\n"
        settings_text += f"üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {'‚úÖ' if self.config['monitoring'] else '‚ùå'}\n"
        settings_text += f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'‚úÖ' if self.config['notifications'] else '‚ùå'}\n"
        settings_text += f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã: {'‚úÖ' if self.config['show_temps'] else '‚ùå'}\n"
        settings_text += f"üåê –°–µ—Ç—å: {'‚úÖ' if self.config['show_network'] else '‚ùå'}\n"
        settings_text += f"‚öôÔ∏è –ü—Ä–æ—Ü–µ—Å—Å—ã: {'‚úÖ' if self.config['show_processes'] else '‚ùå'}\n"
        settings_text += f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {self.config['refresh_rate']}s\n"

        await call.answer(settings_text, show_alert=True)

    async def show_tools(self, call):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"""
        tools_text = "üîß <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:</b>\n\n"
        tools_text += "‚Ä¢ üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã\n"
        tools_text += "‚Ä¢ üèÉ –ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n"
        tools_text += "‚Ä¢ üîê –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n"
        tools_text += "‚Ä¢ ‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã\n"
        tools_text += "‚Ä¢ üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤\n"
        tools_text += "‚Ä¢ üéÆ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ GPU\n"
        tools_text += "‚Ä¢ üíø –ê–Ω–∞–ª–∏–∑ –¥–∏—Å–∫–æ–≤\n"
        tools_text += "‚Ä¢ üåê –°–µ—Ç–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
        tools_text += "‚Ä¢ üå°Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä\n"
        tools_text += "‚Ä¢ ‚öôÔ∏è –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤\n"

        await call.answer(tools_text, show_alert=True)

    async def show_charts(self, call):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏"""
        await call.answer("üìä –ì—Ä–∞—Ñ–∏–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã")

    async def export_json(self, call, report_id):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ JSON"""
        await call.answer("üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON –∑–∞–≤–µ—Ä—à–µ–Ω")

    async def export_html(self, call, report_id):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ HTML"""
        await call.answer("üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ HTML –∑–∞–≤–µ—Ä—à–µ–Ω")

    async def export_csv(self, call, report_id):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV"""
        await call.answer("üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV –∑–∞–≤–µ—Ä—à–µ–Ω")

    async def show_report_charts(self, call, report_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –æ—Ç—á–µ—Ç–∞"""
        await call.answer("üìä –ì—Ä–∞—Ñ–∏–∫–∏ –æ—Ç—á–µ—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã")

    async def send_report(self, call, report_id):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç"""
        await call.answer("üìß –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

    async def save_report(self, call, report_id):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç"""
        await call.answer("üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

    # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–µ—Ç–æ–¥—ã
    async def _run_neofetch(self, message):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å neofetch"""
        try:
            # soso
            subprocess.run(["which", "neofetch"], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
            command = ["neofetch"]
            if self.config["args"]:
                command.extend(self.config["args"].split())

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if self.config["custom_ascii"]:
                command.extend(["--ascii", self.config["custom_ascii"]])

            # –ó–∞–ø—É—Å–∫–∞–µ–º neofetch
            neofetch_process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

            # –£–±–∏—Ä–∞–µ–º ANSI –∫–æ–¥—ã
            sed_process = subprocess.Popen(
                ["sed", "s/\x1B\[[0-9;?]*[a-zA-Z]//g"], 
                stdin=neofetch_process.stdout, 
                stdout=subprocess.PIPE, 
                stderr=subprocess.PIPE,
                text=True
            )
            neofetch_process.stdout.close()

            result, error = sed_process.communicate()

            if sed_process.returncode != 0:
                await utils.answer(message, self.strings("err").format(error=error))
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
            if self.config["show_temps"]:
                result += await self._get_temperature_info()

            if self.config["show_network"]:
                result += await self._get_network_summary()

            if self.config["show_processes"]:
                result += await self._get_process_summary()

            formatted_result = f'<pre><code class="language-stdout">{utils.escape_html(result)}</code></pre>'

            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            buttons = [
                [
                    {"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "callback": self.refresh_neofetch, "args": ()},
                    {"text": "üìä –ü–æ–¥—Ä–æ–±–Ω–µ–µ", "callback": self.show_detailed_info, "args": ()},
                    {"text": "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", "callback": self.save_neofetch, "args": ()}
                ]
            ]

            await utils.answer(message, formatted_result, reply_markup=buttons)

        except subprocess.CalledProcessError:
            await utils.answer(message, self.strings("no_neofetch"))
        except Exception as e:
            await utils.answer(message, self.strings("err").format(error=str(e)))

    async def refresh_neofetch(self, call):
        """–û–±–Ω–æ–≤–∏—Ç—å neofetch"""
        await call.answer("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await call.answer("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ")

    async def show_detailed_info(self, call):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        detailed_info = await self._get_detailed_system_info()
        await call.edit(detailed_info)

    async def save_neofetch(self, call):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç neofetch"""
        await call.answer("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

    async def _get_detailed_system_info(self):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
        info = "üñ•Ô∏è <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ</b>\n\n"

        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info += f"üíª <b>–°–∏—Å—Ç–µ–º–∞:</b> {platform.system()} {platform.release()}\n"
        info += f"üèóÔ∏è <b>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</b> {platform.architecture()[0]}\n"
        info += f"üñ•Ô∏è <b>–ú–∞—à–∏–Ω–∞:</b> {platform.machine()}\n"
        info += f"üêç <b>Python:</b> {sys.version.split()[0]}\n"

        # CPU –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info += f"\nüî• <b>CPU:</b>\n"
        info += f"‚Ä¢ –Ø–¥—Ä–∞: {psutil.cpu_count()}\n"
        info += f"‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞: {psutil.cpu_percent(interval=1)}%\n"

        # –ü–∞–º—è—Ç—å
        memory = psutil.virtual_memory()
        info += f"\nüíæ <b>–ü–∞–º—è—Ç—å:</b>\n"
        info += f"‚Ä¢ –í—Å–µ–≥–æ: {memory.total // (1024**3)} GB\n"
        info += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {memory.used // (1024**3)} GB\n"
        info += f"‚Ä¢ –°–≤–æ–±–æ–¥–Ω–æ: {memory.available // (1024**3)} GB\n"
        info += f"‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞: {memory.percent}%\n"

        # –î–∏—Å–∫–∏
        info += f"\nüíø <b>–î–∏—Å–∫–∏:</b>\n"
        for partition in psutil.disk_partitions():
            try:
                partition_usage = psutil.disk_usage(partition.mountpoint)
                info += f"‚Ä¢ {partition.device}: {partition_usage.used // (1024**3)} GB / {partition_usage.total // (1024**3)} GB\n"
            except PermissionError:
                continue

        # –°–µ—Ç—å
        if self.config["show_network"]:
            net_info = psutil.net_io_counters()
            info += f"\nüåê <b>–°–µ—Ç—å:</b>\n"
            info += f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {net_info.bytes_sent // (1024**2)} MB\n"
            info += f"‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ: {net_info.bytes_recv // (1024**2)} MB\n"

        # Uptime
        boot_time = psutil.boot_time()
        uptime = time.time() - boot_time
        hours, remainder = divmod(uptime, 3600)
        minutes, seconds = divmod(remainder, 60)
        info += f"\n‚è±Ô∏è <b>Uptime:</b> {int(hours)}h {int(minutes)}m {int(seconds)}s\n"

        return info

    async def _get_gpu_info(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ GPU"""
        info = "üéÆ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ GPU</b>\n\n"

        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ nvidia-smi
            result = subprocess.run(
                ["nvidia-smi", "--query-gpu=name,memory.total,memory.used,temperature.gpu", "--format=csv,noheader,nounits"],
                capture_output=True,
                text=True
            )

            if result.returncode == 0:
                for line in result.stdout.strip().split('\n'):
                    if line:
                        parts = line.split(', ')
                        if len(parts) >= 4:
                            name, total_mem, used_mem, temp = parts
                            info += f"üéÆ <b>GPU:</b> {name}\n"
                            info += f"üíæ <b>–ü–∞–º—è—Ç—å:</b> {used_mem} MB / {total_mem} MB\n"
                            info += f"üå°Ô∏è <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {temp}¬∞C\n\n"
            else:
                info += "‚ùå NVIDIA GPU –Ω–µ –Ω–∞–π–¥–µ–Ω\n"

        except FileNotFoundError:
            info += "‚ùå nvidia-smi –Ω–µ –Ω–∞–π–¥–µ–Ω\n"

        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ lspci
        try:
            result = subprocess.run(["lspci", "-v"], capture_output=True, text=True)
            if result.returncode == 0:
                for line in result.stdout.split('\n'):
                    if 'VGA' in line or 'Display' in line:
                        info += f"üéÆ <b>–í–∏–¥–µ–æ–∞–¥–∞–ø—Ç–µ—Ä:</b> {line.split(': ', 1)[1] if ': ' in line else line}\n"
        except:
            pass

        return info

    async def _get_disk_info(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–∞—Ö"""
        info = "üíø <b>–ê–Ω–∞–ª–∏–∑ –¥–∏—Å–∫–æ–≤</b>\n\n"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–¥–µ–ª–∞—Ö
        for partition in psutil.disk_partitions():
            try:
                partition_usage = psutil.disk_usage(partition.mountpoint)
                used_gb = partition_usage.used // (1024**3)
                total_gb = partition_usage.total // (1024**3)
                free_gb = partition_usage.free // (1024**3)
                percent = (partition_usage.used / partition_usage.total) * 100

                info += f"üíø <b>{partition.device}</b>\n"
                info += f"‚Ä¢ –§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞: {partition.fstype}\n"
                info += f"‚Ä¢ –†–∞–∑–º–µ—Ä: {total_gb} GB\n"
                info += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {used_gb} GB ({percent:.1f}%)\n"
                info += f"‚Ä¢ –°–≤–æ–±–æ–¥–Ω–æ: {free_gb} GB\n"
                info += f"‚Ä¢ –¢–æ—á–∫–∞ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {partition.mountpoint}\n\n"

            except PermissionError:
                continue

        # I/O —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        disk_io = psutil.disk_io_counters()
        if disk_io:
            info += f"üìä <b>I/O —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            info += f"‚Ä¢ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ: {disk_io.read_bytes // (1024**2)} MB\n"
            info += f"‚Ä¢ –ó–∞–ø–∏—Å–∞–Ω–æ: {disk_io.write_bytes // (1024**2)} MB\n"
            info += f"‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–∏ —á—Ç–µ–Ω–∏—è: {disk_io.read_count}\n"
            info += f"‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏: {disk_io.write_count}\n"

        return info

    async def _get_network_info(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ç–∏"""
        info = "üåê <b>–°–µ—Ç–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"

        # –°–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
        interfaces = psutil.net_if_addrs()
        for interface_name, interface_addresses in interfaces.items():
            info += f"üîå <b>{interface_name}:</b>\n"
            for address in interface_addresses:
                if address.family == 2:  # IPv4
                    info += f"‚Ä¢ IPv4: {address.address}\n"
                elif address.family == 10:  # IPv6
                    info += f"‚Ä¢ IPv6: {address.address}\n"
                elif address.family == 17:  # MAC
                    info += f"‚Ä¢ MAC: {address.address}\n"
            info += "\n"

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏
        net_io = psutil.net_io_counters()
        if net_io:
            info += f"üìä <b>–°–µ—Ç–µ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            info += f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {net_io.bytes_sent // (1024**2)} MB\n"
            info += f"‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ: {net_io.bytes_recv // (1024**2)} MB\n"
            info += f"‚Ä¢ –ü–∞–∫–µ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {net_io.packets_sent}\n"
            info += f"‚Ä¢ –ü–∞–∫–µ—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {net_io.packets_recv}\n"

        return info

    async def _get_top_processes(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        info = "‚öôÔ∏è <b>–¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é CPU</b>\n\n"

        processes = []
        for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent']):
            try:
                processes.append(proc.info)
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                pass

        # soso
        processes.sort(key=lambda x: x['cpu_percent'] or 0, reverse=True)

        for i, proc in enumerate(processes[:10]):  # –¢–æ–ø 10
            info += f"{i+1}. <b>{proc['name']}</b>\n"
            info += f"   PID: {proc['pid']}\n"
            info += f"   CPU: {proc['cpu_percent']:.1f}%\n"
            info += f"   Memory: {proc['memory_percent']:.1f}%\n\n"

        return info

    async def _get_temperatures(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"""
        info = "üå°Ô∏è <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤</b>\n\n"

        try:
            temps = psutil.sensors_temperatures()
            if temps:
                for name, entries in temps.items():
                    info += f"üå°Ô∏è <b>{name}:</b>\n"
                    for entry in entries:
                        info += f"‚Ä¢ {entry.label or name}: {entry.current:.1f}¬∞C\n"
                        if entry.high:
                            info += f"  (–º–∞–∫—Å: {entry.high:.1f}¬∞C)\n"
                    info += "\n"
            else:
                info += "‚ùå –î–∞—Ç—á–∏–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
        except:
            info += "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä\n"

        return info

    async def _get_temperature_info(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ"""
        temp_info = "\nüå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã:\n"

        try:
            temps = psutil.sensors_temperatures()
            if temps:
                for name, entries in temps.items():
                    for entry in entries:
                        temp_info += f"‚Ä¢ {entry.label or name}: {entry.current:.1f}¬∞C\n"
            else:
                temp_info += "‚Ä¢ –î–∞—Ç—á–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
        except:
            temp_info += "‚Ä¢ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö\n"

        return temp_info

    async def _get_network_summary(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å–µ—Ç–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        net_info = "\nüåê –°–µ—Ç—å:\n"

        try:
            net_io = psutil.net_io_counters()
            if net_io:
                net_info += f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {net_io.bytes_sent // (1024**2)} MB\n"
                net_info += f"‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ: {net_io.bytes_recv // (1024**2)} MB\n"
        except:
            net_info += "‚Ä¢ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö\n"

        return net_info

    async def _get_process_summary(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö"""
        proc_info = "\n‚öôÔ∏è –ü—Ä–æ—Ü–µ—Å—Å—ã:\n"

        try:
            processes = list(psutil.process_iter(['name', 'cpu_percent']))
            processes.sort(key=lambda x: x.info['cpu_percent'] or 0, reverse=True)

            for i, proc in enumerate(processes[:3]):  # –¢–æ–ø 3
                proc_info += f"‚Ä¢ {proc.info['name']}: {proc.info['cpu_percent']:.1f}%\n"
        except:
            proc_info += "‚Ä¢ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö\n"

        return proc_info

    async def _run_benchmark(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–µ–Ω—á–º–∞—Ä–∫"""
        results = {}

        # CPU –±–µ–Ω—á–º–∞—Ä–∫
        start_time = time.time()
        # –ü—Ä–æ—Å—Ç–æ–π CPU —Ç–µ—Å—Ç
        sum(i * i for i in range(100000))
        cpu_time = time.time() - start_time
        results['cpu_score'] = int(10000 / cpu_time)

        # Memory –±–µ–Ω—á–º–∞—Ä–∫
        memory = psutil.virtual_memory()
        results['memory_score'] = int((memory.total // (1024**3)) * 100 / memory.percent)

        # Disk –±–µ–Ω—á–º–∞—Ä–∫
        disk_usage = psutil.disk_usage('/')
        results['disk_score'] = int((disk_usage.free // (1024**3)) * 10)

        # Network –±–µ–Ω—á–º–∞—Ä–∫
        net_io = psutil.net_io_counters()
        results['network_score'] = int((net_io.bytes_sent + net_io.bytes_recv) // (1024**2))

        # –û–±—â–∏–π —Å—á–µ—Ç
        scores = [results['cpu_score'], results['memory_score'], results['disk_score'], results['network_score']]
        results['overall_score'] = int(sum(scores) / len(scores))

        return results

    async def _run_optimization(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é"""
        results = {}

        # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
        try:
            subprocess.run(['sync'], check=True)
            results['Cache cleared'] = '‚úÖ'
        except:
            results['Cache cleared'] = '‚ùå'

        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        try:
            temp_files = len(os.listdir('/tmp'))
            results[f'Temp files found'] = str(temp_files)
        except:
            results['Temp files'] = '‚ùå'

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ swap
        try:
            swap = psutil.swap_memory()
            results['Swap usage'] = f'{swap.percent}%'
        except:
            results['Swap usage'] = '‚ùå'

        return results

    async def _run_security_scan(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        results = {}

        # soso
        try:
            connections = psutil.net_connections()
            listening_ports = [conn.laddr.port for conn in connections if conn.status == 'LISTEN']
            results['Open ports'] = str(len(listening_ports))
        except:
            results['Open ports'] = '‚ùå'

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        try:
            processes = len(list(psutil.process_iter()))
            results['Running processes'] = str(processes)
        except:
            results['Running processes'] = '‚ùå'

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        try:
            disk_usage = psutil.disk_usage('/')
            results['Disk usage'] = f'{(disk_usage.used / disk_usage.total) * 100:.1f}%'
        except:
            results['Disk usage'] = '‚ùå'

        return results

    async def _generate_system_report(self):
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –æ —Å–∏—Å—Ç–µ–º–µ"""
        report = {
            'timestamp': datetime.now().isoformat(),
            'system': {
                'platform': platform.system(),
                'release': platform.release(),
                'architecture': platform.architecture()[0]
            },
            'cpu': {
                'cores': psutil.cpu_count(),
                'usage': psutil.cpu_percent(interval=1)
            },
            'memory': dict(psutil.virtual_memory()._asdict()),
            'disk': {},
            'network': dict(psutil.net_io_counters()._asdict()),
            'processes': len(list(psutil.process_iter()))
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–∞—Ö
        for partition in psutil.disk_partitions():
            try:
                usage = psutil.disk_usage(partition.mountpoint)
                report['disk'][partition.device] = {
                    'total': usage.total,
                    'used': usage.used,
                    'free': usage.free,
                    'percent': (usage.used / usage.total) * 100
                }
            except:
                pass

        return report

    async def _start_monitoring(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        if self.monitoring_active:
            return

        self.monitoring_active = True
        self.monitoring_task = asyncio.create_task(self._monitoring_loop())

    async def _stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        if not self.monitoring_active:
            return

        self.monitoring_active = False
        if self.monitoring_task:
            self.monitoring_task.cancel()
            try:
                await self.monitoring_task
            except asyncio.CancelledError:
                pass

    async def _monitoring_loop(self):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.monitoring_active:
            try:
                # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–∏—Å—Ç–µ–º–µ
                system_data = {
                    'timestamp': time.time(),
                    'cpu_percent': psutil.cpu_percent(),
                    'memory_percent': psutil.virtual_memory().percent,
                    'disk_usage': psutil.disk_usage('/').percent,
                    'network_sent': psutil.net_io_counters().bytes_sent,
                    'network_recv': psutil.net_io_counters().bytes_recv
                }

                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                self.system_history.append(system_data)

                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
                if len(self.system_history) > 1000:
                    self.system_history = self.system_history[-1000:]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã
                await self._check_alerts(system_data)

                # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                await asyncio.sleep(self.config["refresh_rate"])

            except asyncio.CancelledError:
                break
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
                await asyncio.sleep(self.config["refresh_rate"])

    async def _check_alerts(self, system_data):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–ª–µ—Ä—Ç—ã"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CPU
        if system_data['cpu_percent'] > 90:
            await self._send_alert("üî• –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU", f"CPU: {system_data['cpu_percent']:.1f}%")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
        if system_data['memory_percent'] > 90:
            await self._send_alert("üíæ –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏", f"Memory: {system_data['memory_percent']:.1f}%")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–∞
        if system_data['disk_usage'] > 95:
            await self._send_alert("üíø –î–∏—Å–∫ –ø–æ—á—Ç–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω", f"Disk: {system_data['disk_usage']:.1f}%")

    async def _send_alert(self, title, message):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç"""
        if self.config["notifications"]:
            alert = {
                'timestamp': time.time(),
                'title': title,
                'message': message
            }
            self.alerts.append(alert)

            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            print(f"ALERT: {title} - {message}")