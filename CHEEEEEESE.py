# meta developer: @Femboy4k
# scope: hikka_only
# scope: hikka_min 1.6.2

from hikkatl.types import Message
from hikkatl.errors import BadRequestError
from .. import loader, utils
import asyncio

@loader.tds
class CheeseModule(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—ã—Ä–∞ üßÄ"""

    strings = {
        "name": "CheeseSender",
        "already_cheesing": "–£–∂–µ —Å—ã—Ä–∏–º—Å—è! üßÄ",
        "start_cheesing": "–ù–∞—á–∏–Ω–∞—é —Å—ã—Ä–∏—Ç—å –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥! üßÄ",
        "not_cheesing": "–ú—ã –∏ —Ç–∞–∫ –Ω–µ —Å—ã—Ä–∏–º! üßÄ",
        "stop_cheesing": "–°—Ç–æ–ø! –°—ã—Ä–æ–∫ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. üßÄ‚ùå",
    }

    strings_ru = {
        "already_cheesing": "–£–∂–µ —Å—ã—Ä–∏–º—Å—è! üßÄ",
        "start_cheesing": "–ù–∞—á–∏–Ω–∞—é —Å—ã—Ä–∏—Ç—å –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥! üßÄ",
        "not_cheesing": "–ú—ã –∏ —Ç–∞–∫ –Ω–µ —Å—ã—Ä–∏–º! üßÄ",
        "stop_cheesing": "–°—Ç–æ–ø! –°—ã—Ä–æ–∫ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. üßÄ‚ùå",
    }

    def __init__(self):
        self.tasks = {}

    async def client_ready(self, client, db):
        self._client = client

    async def send_cheese(self, chat_id: int):
        try:
            while True:
                await self._client.send_message(chat_id, "üßÄ")
                await asyncio.sleep(10)
        except (asyncio.CancelledError, BadRequestError):
            pass

    @loader.command(ru_doc="–ù–∞—á–∞—Ç—å —Å—ã—Ä–∏—Ç—å –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥")
    async def —Å—ã—Äcmd(self, message: Message):
        """–ù–∞—á–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—ã—Ä"""
        chat_id = utils.get_chat_id(message)

        if chat_id in self.tasks:
            await utils.answer(message, self.strings("already_cheesing"))
            return

        self.tasks[chat_id] = asyncio.create_task(self.send_cheese(chat_id))
        await utils.answer(message, self.strings("start_cheesing"))

    @loader.command(ru_doc="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—ã—Ä")
    async def —Å—Ç–æ–ø—Å—ã—Äcmd(self, message: Message):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å—ã—Ä–∞"""
        chat_id = utils.get_chat_id(message)

        task = self.tasks.get(chat_id)
        if not task:
            await utils.answer(message, self.strings("not_cheesing"))
            return

        task.cancel()
        del self.tasks[chat_id]
        await utils.answer(message, self.strings("stop_cheesing"))

    async def on_unload(self):
        for task in self.tasks.values():
            task.cancel()
        self.tasks.clear()