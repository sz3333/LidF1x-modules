# meta developer: Zeris
import os
import shutil
import time
import mimetypes
import zipfile
import tarfile
import hashlib
import json
import stat
import pwd
import grp
import subprocess
import asyncio
import signal
import threading
from pathlib import Path
from datetime import datetime
from telethon.tl.types import Message, DocumentAttributeFilename
from .. import loader, utils

@loader.tds
class FileManagerMod(loader.Module):
    """–§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–º"""

    strings = {
        "name": "FileManager",
        "current_dir": "üìÅ –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: <code>{path}</code>",
        "file_info": "üìÑ <b>–§–∞–π–ª:</b> {name}\nüìè <b>–†–∞–∑–º–µ—Ä:</b> {size}\nüìÖ <b>–ò–∑–º–µ–Ω–µ–Ω:</b> {modified}",
        "folder_info": "üìÅ <b>–ü–∞–ø–∫–∞:</b> {name}\nüìä <b>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:</b> {items} —ç–ª–µ–º–µ–Ω—Ç–æ–≤\nüìÖ <b>–ò–∑–º–µ–Ω–µ–Ω–∞:</b> {modified}",
        "file_uploaded": "‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {name}",
        "file_deleted": "üóëÔ∏è –§–∞–π–ª —É–¥–∞–ª–µ–Ω: {name}",
        "folder_created": "üìÅ –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {name}",
        "folder_deleted": "üóëÔ∏è –ü–∞–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞: {name}",
        "file_copied": "üìã –§–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {name}",
        "file_moved": "üìÅ –§–∞–π–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω: {name}",
        "file_renamed": "üìù –§–∞–π–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: {old} ‚Üí {new}",
        "archive_created": "üì¶ –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: {name}",
        "archive_extracted": "üìÇ –ê—Ä—Ö–∏–≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω: {name}",
        "search_results": "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: {count} –Ω–∞–π–¥–µ–Ω–æ",
        "permissions_changed": "üîß –ü—Ä–∞–≤–∞ –∏–∑–º–µ–Ω–µ–Ω—ã: {name}",
        "error": "‚ùå –û—à–∏–±–∫–∞: {error}",
        "access_denied": "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –∫: {path}",
        "file_not_found": "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}",
        "operation_cancelled": "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
        "operation_success": "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
        "file_too_large": "‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏",
        "upload_file": "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏",
        "no_files": "üìÇ –ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞",
        "disk_usage": "üíø –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: {used}/{total} ({percent}%)",
        "trash_empty": "üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞",
        "trash_restored": "‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã: {name}",
        "trash_emptied": "üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞",
        "favorites_empty": "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –ø—É—Å—Ç",
        "added_to_favorites": "‚≠ê –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {name}",
        "removed_from_favorites": "‚ùå –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {name}",
        "search_query": "üîç –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:",
        "search_in_progress": "üîç –ü–æ–∏—Å–∫ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...",
        "search_complete": "üîç –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω",
        "create_folder_name": "üìÅ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏:",
        "rename_prompt": "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:",
        "paste_here": "üìã –í—Å—Ç–∞–≤–∏—Ç—å —Å—é–¥–∞",
        "nothing_to_paste": "üìã –ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –ø—É—Å—Ç",
        "file_exists": "‚ö†Ô∏è –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
        "compression_started": "üì¶ –ù–∞—á–∏–Ω–∞–µ–º —Å–∂–∞—Ç–∏–µ...",
        "compression_finished": "üì¶ –°–∂–∞—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
        "extraction_started": "üìÇ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å–ø–∞–∫–æ–≤–∫—É...",
        "extraction_finished": "üìÇ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
        "calculating_size": "üìè –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä...",
        "size_calculated": "üìè –†–∞–∑–º–µ—Ä: {size}",
        "file_properties": "üìä –°–≤–æ–π—Å—Ç–≤–∞ —Ñ–∞–π–ª–∞",
        "permission_owner": "üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {owner}",
        "permission_group": "üë• –ì—Ä—É–ø–ø–∞: {group}",
        "permission_mode": "üîß –ü—Ä–∞–≤–∞: {mode}",
        "file_type": "üìÑ –¢–∏–ø: {type}",
        "file_hash": "üîê MD5: {hash}",
        "symlink_target": "üîó –°—Å—ã–ª–∫–∞ –Ω–∞: {target}",
        "hidden_files_shown": "üëÅÔ∏è –°–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã –ø–æ–∫–∞–∑–∞–Ω—ã",
        "hidden_files_hidden": "üôà –°–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã —Å–∫—Ä—ã—Ç—ã",
        "sort_changed": "üìä –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞: {sort}",
        "editor_opened": "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–æ—Ä –æ—Ç–∫—Ä—ã—Ç",
        "editor_saved": "üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω",
        "viewer_opened": "üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∫—Ä—ã—Ç",
        "batch_operation": "‚öôÔ∏è –ü–∞–∫–µ—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è",
        "select_all": "‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ",
        "deselect_all": "‚ùå –°–Ω—è—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ",
        "selected_count": "‚úÖ –í—ã–±—Ä–∞–Ω–æ: {count}",
        "operation_on_selected": "‚öôÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è –Ω–∞–¥ –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏",
        "settings_saved": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
        "theme_changed": "üé® –¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞",
        "link_created": "üîó –°—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞",
        "encrypted": "üîê –§–∞–π–ª –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω",
        "terminal_opened": "üíª –¢–µ—Ä–º–∏–Ω–∞–ª –æ—Ç–∫—Ä—ã—Ç",
        "terminal_closed": "‚ùå –¢–µ—Ä–º–∏–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç",
        "command_executed": "‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞",
        "command_failed": "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã",
        "command_running": "üîÑ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...",
        "command_stopped": "‚èπÔ∏è –ö–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
        "command_output": "üìã –†–µ–∑—É–ª—å—Ç–∞—Ç:\n<pre>{output}</pre>",
        "command_error": "‚ùå –û—à–∏–±–∫–∞:\n<pre>{error}</pre>",
        "command_timeout": "‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
        "command_killed": "üíÄ –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
        "terminal_prompt": "üíª –¢–µ—Ä–º–∏–Ω–∞–ª - {path}\n\n$ {command}",
        "enter_command": "üíª –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:",
        "terminal_session": "üíª <b>–¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è</b>\n\nüìÅ –†–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞: <code>{path}</code>\n‚è∞ –í—Ä–µ–º—è: {time}",
        "script_executed": "üêç –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω",
        "script_failed": "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞",
        "script_running": "üîÑ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...",
        "script_output": "üìã –í—ã–≤–æ–¥ —Å–∫—Ä–∏–ø—Ç–∞:\n<pre>{output}</pre>",
        "script_error": "‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞:\n<pre>{error}</pre>",
        "python_not_found": "‚ùå Python –Ω–µ –Ω–∞–π–¥–µ–Ω",
        "interpreter_not_found": "‚ùå –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
        "syntax_check": "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞",
        "syntax_ok": "‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω",
        "syntax_error": "‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞",
        "process_monitor": "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
        "process_killed": "üíÄ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω",
        "process_not_found": "‚ùå –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω",
        "system_info": "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ",
        "quick_commands": "‚ö° –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã",
        "command_history": "üìã –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥",
        "clear_history": "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
        "save_session": "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é",
        "load_session": "üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Å—Å–∏—é",
        "terminal_help": "‚ùì –ü–æ–º–æ—â—å –ø–æ —Ç–µ—Ä–º–∏–Ω–∞–ª—É",
        "command_not_allowed": "üö´ –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞",
        "dangerous_command": "‚ö†Ô∏è –û–ø–∞—Å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ",
        "confirm_execution": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ",
        "cancel_execution": "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "start_path",
                os.path.expanduser("~"),
                "–ù–∞—á–∞–ª—å–Ω–∞—è –ø–∞–ø–∫–∞",
                validator=loader.validators.String()
            ),
            loader.ConfigValue(
                "show_hidden",
                False,
                "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã",
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "sort_by",
                "name",
                "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
                validator=loader.validators.Choice(["name", "size", "date", "type"])
            ),
            loader.ConfigValue(
                "max_file_size",
                50,
                "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (MB)",
                validator=loader.validators.Integer(minimum=1, maximum=2000)
            ),
            loader.ConfigValue(
                "items_per_page",
                10,
                "–≠–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ",
                validator=loader.validators.Integer(minimum=5, maximum=50)
            ),
            loader.ConfigValue(
                "enable_trash",
                True,
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É",
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "terminal_timeout",
                30,
                "–¢–∞–π–º–∞—É—Ç –∫–æ–º–∞–Ω–¥ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ (—Å–µ–∫)",
                validator=loader.validators.Integer(minimum=5, maximum=300)
            ),
            loader.ConfigValue(
                "allow_dangerous_commands",
                False,
                "–†–∞–∑—Ä–µ—à–∏—Ç—å –æ–ø–∞—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "max_output_length",
                3000,
                "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –≤—ã–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã",
                validator=loader.validators.Integer(minimum=100, maximum=4000)
            ),
            loader.ConfigValue(
                "enable_python_execution",
                True,
                "–†–∞–∑—Ä–µ—à–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Python —Å–∫—Ä–∏–ø—Ç–æ–≤",
                validator=loader.validators.Boolean()
            )
        )

        self.current_dirs = {}
        self.clipboard = {}
        self.favorites = {}
        self.recent_files = {}
        self.file_history = {}
        self.selection = {}
        self.sort_order = {}
        self.page_offset = {}
        self.operation_mode = {}
        self.trash_bin = {}
        self.search_results = {}
        self.user_input = {}
        self.terminal_sessions = {}
        self.running_processes = {}
        self.command_history = {}
        self.terminal_mode = {}
        self.script_processes = {}
        self.process_monitors = {}
        self.upload_pending = {} # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞

        self.dangerous_commands = {
            'rm -rf', 'format', 'fdisk', 'mkfs', 'dd', 'halt', 'reboot', 'shutdown',
            'passwd', 'su', 'sudo', 'chmod 777', 'chown', 'init', 'kill -9',
            'killall', 'pkill', 'fuser', 'mount', 'umount', 'crontab -r'
        }

        self.allowed_interpreters = {
            'python': 'python3',
            'python3': 'python3',
            'python2': 'python2',
            'node': 'node',
            'php': 'php',
            'ruby': 'ruby',
            'perl': 'perl',
            'bash': 'bash',
            'sh': 'sh',
            'zsh': 'zsh'
        }

    async def client_ready(self, client, db):
        self._client = client
        self._db = db
        await self._init_file_manager()

    async def _init_file_manager(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        try:
            start_path = self.config["start_path"]
            if not os.path.exists(start_path):
                self.config["start_path"] = os.path.expanduser("~")

            self.trash_path = os.path.join(os.path.expanduser("~"), ".hikka_trash")
            os.makedirs(self.trash_path, exist_ok=True)

            self.temp_path = os.path.join(os.path.expanduser("~"), ".hikka_temp")
            os.makedirs(self.temp_path, exist_ok=True)

            self.favorites_file = os.path.join(os.path.expanduser("~"), ".hikka_favorites.json")
            self.history_file = os.path.join(os.path.expanduser("~"), ".hikka_history.json")

            await self._load_favorites()
            await self._load_history()

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")

    async def _load_favorites(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
        try:
            if os.path.exists(self.favorites_file):
                with open(self.favorites_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    for chat_id, favorites in data.items():
                        self.favorites[int(chat_id)] = favorites
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")

    async def _save_favorites(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
        try:
            with open(self.favorites_file, 'w', encoding='utf-8') as f:
                data = {str(k): v for k, v in self.favorites.items()}
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")

    async def _load_history(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"""
        try:
            if os.path.exists(self.history_file):
                with open(self.history_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    for chat_id, history in data.items():
                        self.file_history[int(chat_id)] = history
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")

    async def _save_history(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"""
        try:
            with open(self.history_file, 'w', encoding='utf-8') as f:
                data = {str(k): v for k, v in self.file_history.items()}
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")

    @loader.command(ru_doc="–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä")
    async def fm(self, message: Message):
        """–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä"""
        chat_id = message.chat_id

        if chat_id not in self.current_dirs:
            self.current_dirs[chat_id] = self.config["start_path"]
            self.page_offset[chat_id] = 0
            self.sort_order[chat_id] = {"by": self.config["sort_by"], "reverse": False}
            self.operation_mode[chat_id] = "normal"
            self.selection[chat_id] = []
            self.terminal_mode[chat_id] = False
            if chat_id not in self.favorites:
                self.favorites[chat_id] = []
            if chat_id not in self.recent_files:
                self.recent_files[chat_id] = []
            if chat_id not in self.file_history:
                self.file_history[chat_id] = []
            if chat_id not in self.command_history:
                self.command_history[chat_id] = []
            self.upload_pending[chat_id] = False # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–ª–∞–≥–∞

        await self._show_file_manager(message, chat_id)

    async def _show_file_manager(self, message, chat_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        current_path = self.current_dirs[chat_id]

        try:
            items = await self._get_directory_contents(current_path, chat_id)

            text = self.strings["current_dir"].format(path=current_path)

            if os.path.exists(current_path):
                disk_usage = shutil.disk_usage(current_path)
                total = disk_usage.total
                used = disk_usage.used
                percent = int((used / total) * 100)
                text += f"\n{self.strings['disk_usage'].format(used=self._format_size(used), total=self._format_size(total), percent=percent)}"

            text += f"\nüìä –≠–ª–µ–º–µ–Ω—Ç–æ–≤: {len(items)}"

            selected_count = len(self.selection[chat_id])
            if selected_count > 0:
                text += f"\n{self.strings['selected_count'].format(count=selected_count)}"

            buttons = await self._create_file_buttons(items, chat_id)
            nav_buttons = await self._create_navigation_buttons(chat_id)
            buttons.extend(nav_buttons)

            await utils.answer(message, text, reply_markup=buttons)

        except PermissionError:
            await utils.answer(message, self.strings["access_denied"].format(path=current_path))
        except Exception as e:
            await utils.answer(message, self.strings["error"].format(error=str(e)))

    async def _get_directory_contents(self, path, chat_id):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏"""
        try:
            items = []
            show_hidden = self.config["show_hidden"]

            with os.scandir(path) as entries:
                for entry in entries:
                    if not show_hidden and entry.name.startswith('.'):
                        continue

                    item_info = {
                        "name": entry.name,
                        "path": entry.path,
                        "is_dir": entry.is_dir(),
                        "size": 0,
                        "modified": 0,
                        "is_symlink": entry.is_symlink()
                    }

                    try:
                        stat = entry.stat()
                        item_info["size"] = stat.st_size
                        item_info["modified"] = stat.st_mtime
                        item_info["mode"] = stat.st_mode
                        item_info["uid"] = stat.st_uid
                        item_info["gid"] = stat.st_gid
                    except:
                        pass

                    items.append(item_info)

            items = await self._sort_items(items, chat_id)
            return items

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏ {path}: {e}")
            return []

    async def _sort_items(self, items, chat_id):
        """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        sort_config = self.sort_order[chat_id]
        sort_by = sort_config["by"]
        reverse = sort_config["reverse"]

        folders = [item for item in items if item["is_dir"]]
        files = [item for item in items if not item["is_dir"]]

        def sort_key(item):
            if sort_by == "name":
                return item["name"].lower()
            elif sort_by == "size":
                return item["size"]
            elif sort_by == "date":
                return item["modified"]
            elif sort_by == "type":
                return Path(item["name"]).suffix.lower()
            return item["name"].lower()

        folders.sort(key=sort_key, reverse=reverse)
        files.sort(key=sort_key, reverse=reverse)

        return folders + files

    async def _create_file_buttons(self, items, chat_id):
        """–°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫"""
        buttons = []
        page_size = self.config["items_per_page"]
        page_offset = self.page_offset[chat_id]

        start_idx = page_offset * page_size
        end_idx = start_idx + page_size
        page_items = items[start_idx:end_idx]

        for item in page_items:
            selected = item["path"] in self.selection[chat_id]

            if item["is_dir"]:
                icon = "üìÅ"
                if selected:
                    icon = "‚úÖüìÅ"
                callback = self.open_folder
            else:
                icon = self._get_file_icon(item["name"])
                if selected:
                    icon = f"‚úÖ{icon}"
                callback = self.file_actions

            name = item["name"]
            if len(name) > 20:
                name = name[:17] + "..."

            button_text = f"{icon} {name}"

            if not item["is_dir"] and item["size"] > 0:
                size_str = self._format_size(item["size"])
                button_text += f" ({size_str})"

            if item["is_symlink"]:
                button_text += " üîó"

            file_action_buttons = [
                {"text": button_text, "callback": callback, "args": (chat_id, item["path"])}
            ]
            if selected:
                # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
                file_action_buttons.append(
                    {"text": "üóëÔ∏è", "callback": self.delete_item, "args": (chat_id, item["path"])}
                )
                # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞: –û—á–∏—Å—Ç–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞–ø–æ–∫)
                if item["is_dir"]:
                    file_action_buttons.append(
                        {"text": "üßπ", "callback": self.clear_folder_content, "args": (chat_id, item["path"])}
                    )

            buttons.append(file_action_buttons)

        if len(items) > page_size:
            pagination_buttons = []

            if page_offset > 0:
                pagination_buttons.append(
                    {"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback": self.prev_page, "args": (chat_id,)}
                )

            pagination_buttons.append(
                {"text": f"üìÑ {page_offset + 1}/{(len(items) - 1) // page_size + 1}",
                 "callback": self.show_page_info, "args": (chat_id,)}
            )

            if end_idx < len(items):
                pagination_buttons.append(
                    {"text": "‚û°Ô∏è –í–ø–µ—Ä–µ–¥", "callback": self.next_page, "args": (chat_id,)}
                )

            buttons.append(pagination_buttons)

        return buttons

    async def _create_navigation_buttons(self, chat_id):
        """–°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        buttons = []
        current_path = self.current_dirs[chat_id]

        nav_row = []

        if current_path != "/":
            nav_row.append(
                {"text": "‚¨ÜÔ∏è –í–≤–µ—Ä—Ö", "callback": self.go_up, "args": (chat_id,)}
            )

        home_path = os.path.expanduser("~")
        if current_path != home_path:
            nav_row.append(
                {"text": "üè† –î–æ–º–æ–π", "callback": self.go_home, "args": (chat_id,)}
            )

        if current_path != "/":
            nav_row.append(
                {"text": "üî¥ –ö–æ—Ä–µ–Ω—å", "callback": self.go_root, "args": (chat_id,)}
            )

        if nav_row:
            buttons.append(nav_row)

        file_ops_row = [
            {"text": "üìÅ –ù–æ–≤–∞—è –ø–∞–ø–∫–∞", "callback": self.create_folder, "args": (chat_id,)},
            {"text": "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å", "callback": self.upload_file, "args": (chat_id,)},
            {"text": "üîç –ü–æ–∏—Å–∫", "callback": self.search_files, "args": (chat_id,)}
        ]
        buttons.append(file_ops_row)

        if chat_id in self.clipboard and self.clipboard[chat_id]:
            paste_row = [
                {"text": "üìã –í—Å—Ç–∞–≤–∏—Ç—å", "callback": self.paste_file, "args": (chat_id,)},
                {"text": "‚ùå –û—á–∏—Å—Ç–∏—Ç—å –±—É—Ñ–µ—Ä", "callback": self.clear_clipboard, "args": (chat_id,)}
            ]
            buttons.append(paste_row)

        selection_row = []
        if len(self.selection[chat_id]) > 0:
            selection_row.extend([
                {"text": "‚öôÔ∏è –û–ø–µ—Ä–∞—Ü–∏–∏", "callback": self.batch_operations, "args": (chat_id,)},
                {"text": "‚ùå –°–Ω—è—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ", "callback": self.deselect_all, "args": (chat_id,)}
            ])
        else:
            selection_row.append(
                {"text": "‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", "callback": self.select_all, "args": (chat_id,)}
            )
        buttons.append(selection_row)

        mode_row = []

        if self.config["show_hidden"]:
            mode_row.append(
                {"text": "üôà –°–∫—Ä—ã—Ç—å —Å–∫—Ä—ã—Ç—ã–µ", "callback": self.toggle_hidden, "args": (chat_id,)}
            )
        else:
            mode_row.append(
                {"text": "üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å —Å–∫—Ä—ã—Ç—ã–µ", "callback": self.toggle_hidden, "args": (chat_id,)}
            )

        sort_by = self.sort_order[chat_id]["by"]
        sort_icons = {"name": "üî§", "size": "üìè", "date": "üìÖ", "type": "üìÑ"}
        mode_row.append(
            {"text": f"{sort_icons[sort_by]} –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞", "callback": self.change_sort, "args": (chat_id,)}
        )

        buttons.append(mode_row)

        tools_row = [
            {"text": "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", "callback": self.show_favorites, "args": (chat_id,)},
            {"text": "üìã –ù–µ–¥–∞–≤–Ω–∏–µ", "callback": self.show_recent, "args": (chat_id,)},
            {"text": "üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞", "callback": self.show_trash, "args": (chat_id,)}
        ]
        buttons.append(tools_row)

        terminal_row = [
            {"text": "üíª –¢–µ—Ä–º–∏–Ω–∞–ª", "callback": self.open_terminal, "args": (chat_id,)},
            {"text": "üìä –°–∏—Å—Ç–µ–º–∞", "callback": self.show_system_info, "args": (chat_id,)},
            {"text": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "callback": self.settings_menu, "args": (chat_id,)}
        ]
        buttons.append(terminal_row)

        buttons.append([
            {"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "callback": self.refresh_view, "args": (chat_id,)}
        ])

        return buttons

    def _get_file_icon(self, filename):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é"""
        extension = Path(filename).suffix.lower()

        icon_map = {
            '.txt': 'üìÑ', '.doc': 'üìÑ', '.docx': 'üìÑ', '.pdf': 'üìë', '.rtf': 'üìÑ',
            '.xls': 'üìä', '.xlsx': 'üìä', '.csv': 'üìä', '.ppt': 'üìä', '.pptx': 'üìä',
            '.jpg': 'üñºÔ∏è', '.jpeg': 'üñºÔ∏è', '.png': 'üñºÔ∏è', '.gif': 'üñºÔ∏è', '.bmp': 'üñºÔ∏è',
            '.svg': 'üñºÔ∏è', '.ico': 'üñºÔ∏è', '.tiff': 'üñºÔ∏è', '.webp': 'üñºÔ∏è',
            '.mp4': 'üé¨', '.avi': 'üé¨', '.mov': 'üé¨', '.wmv': 'üé¨', '.flv': 'üé¨',
            '.mkv': 'üé¨', '.webm': 'üé¨', '.m4v': 'üé¨',
            '.mp3': 'üéµ', '.wav': 'üéµ', '.flac': 'üéµ', '.aac': 'üéµ', '.ogg': 'üéµ',
            '.wma': 'üéµ', '.m4a': 'üéµ',
            '.zip': 'üì¶', '.rar': 'üì¶', '.7z': 'üì¶', '.tar': 'üì¶', '.gz': 'üì¶',
            '.bz2': 'üì¶', '.xz': 'üì¶',
            '.py': 'üêç', '.js': 'üìÑ', '.html': 'üåê', '.css': 'üé®', '.php': 'üìÑ',
            '.cpp': 'üìÑ', '.c': 'üìÑ', '.h': 'üìÑ', '.java': 'üìÑ', '.go': 'üìÑ',
            '.exe': '‚öôÔ∏è', '.app': '‚öôÔ∏è', '.deb': 'üì¶', '.rpm': 'üì¶', '.dmg': 'üíø',
            '.iso': 'üíø', '.msi': '‚öôÔ∏è',
            '.json': 'üìÑ', '.xml': 'üìÑ', '.yml': 'üìÑ', '.yaml': 'üìÑ', '.ini': 'üìÑ',
            '.cfg': 'üìÑ', '.conf': 'üìÑ',
            '.db': 'üóÑÔ∏è', '.sqlite': 'üóÑÔ∏è', '.sql': 'üóÑÔ∏è',
            '.ttf': 'üî§', '.otf': 'üî§', '.woff': 'üî§',
            '.log': 'üìã', '.tmp': 'üóÇÔ∏è', '.bak': 'üíæ'
        }

        return icon_map.get(extension, 'üìÑ')

    def _format_size(self, size):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞"""
        for unit in ['B', 'KB', 'MB', 'GB', 'TB']:
            if size < 1024.0:
                return f"{size:.1f} {unit}"
            size /= 1024.0
        return f"{size:.1f} PB"

    def _format_date(self, timestamp):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É"""
        return datetime.fromtimestamp(timestamp).strftime("%d.%m.%Y %H:%M")

    def _get_file_hash(self, file_path):
        """–ü–æ–ª—É—á–∏—Ç—å MD5 —Ö–µ—à —Ñ–∞–π–ª–∞"""
        try:
            hash_md5 = hashlib.md5()
            with open(file_path, "rb") as f:
                for chunk in iter(lambda: f.read(4096), b""):
                    hash_md5.update(chunk)
            return hash_md5.hexdigest()
        except:
            return "N/A"

    def _get_file_type(self, file_path):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø —Ñ–∞–π–ª–∞"""
        try:
            mime_type, _ = mimetypes.guess_type(file_path)
            return mime_type or "Unknown"
        except:
            return "Unknown"

    def _get_file_permissions(self, file_path):
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É"""
        try:
            file_stat = os.stat(file_path)
            mode = file_stat.st_mode
            permissions = stat.filemode(mode)

            try:
                owner = pwd.getpwuid(file_stat.st_uid).pw_name
            except:
                owner = str(file_stat.st_uid)

            try:
                group = grp.getgrgid(file_stat.st_gid).gr_name
            except:
                group = str(file_stat.st_gid)

            return {
                "mode": permissions,
                "owner": owner,
                "group": group,
                "octal": oct(mode)[-3:]
            }
        except:
            return {"mode": "Unknown", "owner": "Unknown", "group": "Unknown", "octal": "000"}

    async def open_folder(self, call, chat_id, folder_path):
        """–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É"""
        try:
            if os.path.isdir(folder_path) and os.access(folder_path, os.R_OK):
                self.current_dirs[chat_id] = folder_path
                self.page_offset[chat_id] = 0

                if chat_id not in self.recent_files:
                    self.recent_files[chat_id] = []
                if folder_path not in self.recent_files[chat_id]:
                    self.recent_files[chat_id].insert(0, folder_path)
                    self.recent_files[chat_id] = self.recent_files[chat_id][:10]

                await self._save_history()
                await self._show_file_manager(call, chat_id)
            else:
                await call.answer(self.strings["access_denied"].format(path=folder_path))
        except Exception as e:
            await call.answer(self.strings["error"].format(error=str(e)))

    async def file_actions(self, call, chat_id, file_path):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ñ–∞–π–ª–∞"""
        try:
            if not os.path.exists(file_path):
                await call.answer(self.strings["file_not_found"].format(path=file_path))
                return

            file_stat = os.stat(file_path)
            file_size = file_stat.st_size
            file_name = os.path.basename(file_path)

            info_text = self.strings["file_info"].format(
                name=file_name,
                size=self._format_size(file_size),
                modified=self._format_date(file_stat.st_mtime)
            )

            buttons = [
                [
                    {"text": "üì§ –°–∫–∞—á–∞—Ç—å", "callback": self.download_file, "args": (chat_id, file_path)},
                    {"text": "üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä", "callback": self.view_file, "args": (chat_id, file_path)},
                    {"text": "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "callback": self.edit_file, "args": (chat_id, file_path)}
                ],
                [
                    {"text": "üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", "callback": self.copy_file, "args": (chat_id, file_path)},
                    {"text": "‚úÇÔ∏è –í—ã—Ä–µ–∑–∞—Ç—å", "callback": self.cut_file, "args": (chat_id, file_path)},
                    {"text": "üìù –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", "callback": self.rename_file, "args": (chat_id, file_path)}
                ]
            ]

            file_ext = Path(file_path).suffix.lower()
            if file_ext == '.py' and self.config["enable_python_execution"]:
                buttons.append([
                    {"text": "üêç –ó–∞–ø—É—Å—Ç–∏—Ç—å Python", "callback": self.run_python_script, "args": (chat_id, file_path)},
                    {"text": "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å", "callback": self.check_python_syntax, "args": (chat_id, file_path)}
                ])

            buttons.extend([
                [
                    {"text": "üîí –ü—Ä–∞–≤–∞", "callback": self.change_permissions, "args": (chat_id, file_path)},
                    {"text": "üîê –®–∏—Ñ—Ä–æ–≤–∞—Ç—å", "callback": self.encrypt_file, "args": (chat_id, file_path)},
                    {"text": "üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å", "callback": self.archive_file, "args": (chat_id, file_path)}
                ],
                [
                    {"text": "‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", "callback": self.add_to_favorites, "args": (chat_id, file_path)},
                    {"text": "üîó –°—Å—ã–ª–∫–∞", "callback": self.create_link, "args": (chat_id, file_path)},
                    {"text": "üìä –°–≤–æ–π—Å—Ç–≤–∞", "callback": self.show_properties, "args": (chat_id, file_path)}
                ],
                [
                    {"text": "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", "callback": self.delete_item, "args": (chat_id, file_path)},
                    {"text": "üîô –ù–∞–∑–∞–¥", "callback": self.back_to_folder, "args": (chat_id,)}
                ]
            ])

            await call.edit(info_text, reply_markup=buttons)

        except Exception as e:
            await call.answer(self.strings["error"].format(error=str(e)))

    async def run_python_script(self, call, chat_id, file_path):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å Python —Å–∫—Ä–∏–ø—Ç"""
        try:
            if not os.path.exists(file_path):
                await call.answer(self.strings["file_not_found"].format(path=file_path))
                return

            await call.answer(self.strings["script_running"])

            process = subprocess.Popen(
                [self.allowed_interpreters['python'], file_path],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                cwd=os.path.dirname(file_path)
            )

            self.script_processes[chat_id] = process

            try:
                stdout, stderr = process.communicate(timeout=self.config["terminal_timeout"])

                if process.returncode == 0:
                    output = stdout.strip()
                    if len(output) > self.config["max_output_length"]:
                        output = output[:self.config["max_output_length"]] + "\n... (–≤—ã–≤–æ–¥ –æ–±—Ä–µ–∑–∞–Ω)"

                    result_text = self.strings["script_output"].format(output=output)
                    await call.answer(result_text)
                else:
                    error = stderr.strip()
                    if len(error) > self.config["max_output_length"]:
                        error = error[:self.config["max_output_length"]] + "\n... (–æ—à–∏–±–∫–∞ –æ–±—Ä–µ–∑–∞–Ω–∞)"

                    result_text = self.strings["script_error"].format(error=error)
                    await call.answer(result_text)

            except subprocess.TimeoutExpired:
                process.kill()
                await call.answer(self.strings["command_timeout"])
            except Exception as e:
                await call.answer(self.strings["script_failed"].format(error=str(e)))
            finally:
                if chat_id in self.script_processes:
                    del self.script_processes[chat_id]

        except Exception as e:
            await call.answer(self.strings["error"].format(error=str(e)))

    async def check_python_syntax(self, call, chat_id, file_path):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Python —Ñ–∞–π–ª–∞"""
        try:
            if not os.path.exists(file_path):
                await call.answer(self.strings["file_not_found"].format(path=file_path))
                return

            process = subprocess.Popen(
                [self.allowed_interpreters['python'], '-m', 'py_compile', file_path],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )

            stdout, stderr = process.communicate(timeout=10)

            if process.returncode == 0:
                await call.answer(self.strings["syntax_ok"])
            else:
                error = stderr.strip()
                await call.answer(self.strings["syntax_error"] + f"\n<pre>{error}</pre>")

        except Exception as e:
            await call.answer(self.strings["error"].format(error=str(e)))

    async def open_terminal(self, call, chat_id):
        """–û—Ç–∫—Ä—ã—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª"""
        try:
            current_path = self.current_dirs[chat_id]

            if chat_id not in self.terminal_sessions:
                self.terminal_sessions[chat_id] = {
                    "current_dir": current_path,
                    "history": [],
                    "environment": dict(os.environ)
                }

            session_info = self.strings["terminal_session"].format(
                path=current_path,
                time=datetime.now().strftime("%H:%M:%S")
            )

            buttons = [
                [
                    {"text": "üìã ls", "callback": self.terminal_command, "args": (chat_id, "ls -la")},
                    {"text": "üìÅ pwd", "callback": self.terminal_command, "args": (chat_id, "pwd")},
                    {"text": "üîç ps", "callback": self.terminal_command, "args": (chat_id, "ps aux")}
                ],
                [
                    {"text": "üíæ df", "callback": self.terminal_command, "args": (chat_id, "df -h")},
                    {"text": "üìä htop", "callback": self.terminal_command, "args": (chat_id, "htop")},
                    {"text": "üåê ping", "callback": self.terminal_command, "args": (chat_id, "ping -c 3 google.com")}
                ],
                [
                    {"text": "üêç python", "callback": self.terminal_command, "args": (chat_id, "python3 --version")},
                    {"text": "üîß git", "callback": self.terminal_command, "args": (chat_id, "git status")},
                    {"text": "üì¶ npm", "callback": self.terminal_command, "args": (chat_id, "npm --version")}
                ],
                [
                    {"text": "üíª –í–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É", "callback": self.enter_command, "args": (chat_id,)},
                    {"text": "üìã –ò—Å—Ç–æ—Ä–∏—è", "callback": self.show_command_history, "args": (chat_id,)},
                    {"text": "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", "callback": self.clear_terminal, "args": (chat_id,)}
                ],
                [
                    {"text": "‚öôÔ∏è –ü—Ä–æ—Ü–µ—Å—Å—ã", "callback": self.show_processes, "args": (chat_id,)},
                    {"text": "üìä –°–∏—Å—Ç–µ–º–∞", "callback": self.show_system_info, "args": (chat_id,)},
                    {"text": "‚ùì –ü–æ–º–æ—â—å", "callback": self.show_terminal_help, "args": (chat_id,)}
                ],
                [
                    {"text": "üîô –ù–∞–∑–∞–¥ –∫ —Ñ–∞–π–ª–∞–º", "callback": self.back_to_folder, "args": (chat_id,)},
                    {"text": "‚ùå –ó–∞–∫—Ä—ã—Ç—å", "callback": self.close_terminal, "args": (chat_id,)}
                ]
            ]

            await call.edit(session_info, reply_markup=buttons)

        except Exception as e:
            await call.answer(self.strings["error"].format(error=str(e)))

    async def terminal_command(self, call, chat_id, command):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ"""
        try:
            if self._is_dangerous_command(command):
                if not self.config["allow_dangerous_commands"]:
                    await call.answer(self.strings["command_not_allowed"])
                    return
                else:
                    await self._confirm_dangerous_command(call, chat_id, command)
                    return

            await call.answer(self.strings["command_running"])

            current_dir = self.terminal_sessions[chat_id]["current_dir"]

            if command.startswith("cd "):
                await self._handle_cd_command(call, chat_id, command)
                return

            process = subprocess.Popen(
                command,
                shell=True,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                cwd=current_dir
            )

            self.running_processes[chat_id] = process

            try:
                stdout, stderr = process.communicate(timeout=self.config["terminal_timeout"])

                if chat_id not in self.command_history:
                    self.command_history[chat_id] = []

                self.command_history[chat_id].append({
                    "command": command,
                    "timestamp": datetime.now().isoformat(),
                    "exit_code": process.returncode,
                    "output": stdout,
                    "error": stderr
                })

                if len(self.command_history[chat_id]) > 100:
                    self.command_history[chat_id] = self.command_history[chat_id][-100:]

                if process.returncode == 0:
                    output = stdout.strip()
                    if len(output) > self.config["max_output_length"]:
                        output = output[:self.config["max_output_length"]] + "\n... (–≤—ã–≤–æ–¥ –æ–±—Ä–µ–∑–∞–Ω)"

                    result_text = self.strings["command_output"].format(output=output or "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    await call.answer(result_text)
                else:
                    error = stderr.strip()
                    if len(error) > self.config["max_output_length"]:
                        error = error[:self.config["max_output_length"]] + "\n... (–æ—à–∏–±–∫–∞ –æ–±—Ä–µ–∑–∞–Ω–∞)"

                    result_text = self.strings["command_error"].format(error=error or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    await call.answer(result_text)

            except subprocess.TimeoutExpired:
                process.kill()
                await call.answer(self.strings["command_timeout"])
            except Exception as e:
                await call.answer(self.strings["command_failed"].format(error=str(e)))
            finally:
                if chat_id in self.running_processes:
                    del self.running_processes[chat_id]

        except Exception as e:
            await call.answer(self.strings["error"].format(error=str(e)))

    async def _handle_cd_command(self, call, chat_id, command):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É cd"""
        try:
            parts = command.split()
            if len(parts) < 2:
                target_dir = os.path.expanduser("~")
            else:
                target_dir = parts[1]

            current_dir = self.terminal_sessions[chat_id]["current_dir"]

            if target_dir == "..":
                new_dir = os.path.dirname(current_dir)
            elif target_dir.startswith("/"):
                new_dir = target_dir
            else:
                new_dir = os.path.join(current_dir, target_dir)

            new_dir = os.path.abspath(new_dir)

            if os.path.exists(new_dir) and os.path.isdir(new_dir):
                self.terminal_sessions[chat_id]["current_dir"] = new_dir
                self.current_dirs[chat_id] = new_dir
                await call.answer(f"üìÅ –ü–µ—Ä–µ—Ö–æ–¥ –≤ {new_dir}")
            else:
                await call.answer(f"‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {new_dir}")

        except Exception as e:
            await call.answer(self.strings["error"].format(error=str(e)))

    def _is_dangerous_command(self, command):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –æ–ø–∞—Å–Ω–æ–π"""
        command_lower = command.lower()
        for dangerous in self.dangerous_commands:
            if dangerous in command_lower:
                return True
        return False

    async def _confirm_dangerous_command(self, call, chat_id, command):
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–∞—Å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        text = f"{self.strings['dangerous_command']}\n\n<pre>{command}</pre>"

        buttons = [
            [
                {"text": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "callback": self.execute_dangerous_command, "args": (chat_id, command)},
                {"text": "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "callback": self.cancel_dangerous_command, "args": (chat_id,)}
            ]
        ]

        await call.edit(text, reply_markup=buttons)

    async def execute_dangerous_command(self, call, chat_id, command):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–∞—Å–Ω—É—é –∫–æ–º–∞–Ω–¥—É –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        await self.terminal_command(call, chat_id, command)

    async def cancel_dangerous_command(self, call, chat_id):
        """–û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–∞—Å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        await call.answer(self.strings["cancel_execution"])
        await self.open_terminal(call, chat_id)

    async def enter_command(self, call, chat_id):
        """–í–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É –≤—Ä—É—á–Ω—É—é"""
        text = self.strings["enter_command"]

        self.user_input[chat_id] = {
            "action": "enter_command",
            "timestamp": time.time()
        }

        buttons = [
            [
                {"text": "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "callback": self.cancel_command_input, "args": (chat_id,)}
            ]
        ]

        await call.edit(text, reply_markup=buttons)

    async def cancel_command_input(self, call, chat_id):
        """–û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã"""
        if chat_id in self.user_input:
            del self.user_input[chat_id]
        await self.open_terminal(call, chat_id)

    async def show_command_history(self, call, chat_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥"""
        try:
            if chat_id not in self.command_history or not self.command_history[chat_id]:
                await call.answer("üìã –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ –ø—É—Å—Ç–∞")
                return

            history = self.command_history[chat_id][-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∫–æ–º–∞–Ω–¥

            text = "üìã <b>–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥:</b>\n\n"
            for i, entry in enumerate(reversed(history), 1):
                timestamp = datetime.fromisoformat(entry["timestamp"]).strftime("%H:%M:%S")
                exit_code = entry["exit_code"]
                status = "‚úÖ" if exit_code == 0 else "‚ùå"

                text += f"{i}. {status} <code>{entry['command']}</code> ({timestamp})\n"

            buttons = [
                [
                    {"text": "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", "callback": self.clear_command_history, "args": (chat_id,)},
                    {"text": "üîô –ù–∞–∑–∞–¥", "callback": self.open_terminal, "args": (chat_id,)}
                ]
            ]

            await call.edit(text, reply_markup=buttons)

        except Exception as e:
            await call.answer(self.strings["error"].format(error=str(e)))

    async def clear_command_history(self, call, chat_id):
        """–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥"""
        self.command_history[chat_id] = []
        await call.answer("üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ –æ—á–∏—â–µ–Ω–∞")
        await self.open_terminal(call, chat_id)

    async def show_processes(self, call, chat_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã"""
        try:
            process = subprocess.Popen(
                ["ps", "aux"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )

            stdout, stderr = process.communicate(timeout=10)

            if process.returncode == 0:
                lines = stdout.strip().split('\n')
                header = lines[0]
                processes = lines[1:11]  # –ü–µ—Ä–≤—ã–µ 10 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤

                text = f"üìä <b>–ü—Ä–æ—Ü–µ—Å—Å—ã:</b>\n\n<pre>{header}\n"
                for proc in processes:
                    text += f"{proc}\n"
                text += "</pre>"

                if len(lines) > 11:
                    text += f"\n... –∏ –µ—â–µ {len(lines) - 11} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"

                buttons = [
                    [
                        {"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "callback": self.show_processes, "args": (chat_id,)},
                        {"text": "üíÄ –£–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å", "callback": self.kill_process, "args": (chat_id,)}
                    ],
                    [
                        {"text": "üîô –ù–∞–∑–∞–¥", "callback": self.open_terminal, "args": (chat_id,)}
                    ]
                ]

                await call.edit(text, reply_markup=buttons)
            else:
                await call.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {stderr}")

        except Exception as e:
            await call.answer(self.strings["error"].format(error=str(e)))

    async def kill_process(self, call, chat_id):
        """–£–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å"""
        text = "üíÄ –í–≤–µ–¥–∏—Ç–µ PID –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:"

        self.user_input[chat_id] = {
            "action": "kill_process",
            "timestamp": time.time()
        }

        buttons = [
            [
                {"text": "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "callback": self.cancel_kill_process, "args": (chat_id,)}
            ]
        ]

        await call.edit(text, reply_markup=buttons)

    async def cancel_kill_process(self, call, chat_id):
        """–û—Ç–º–µ–Ω–∏—Ç—å —É–±–∏–π—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        if chat_id in self.user_input:
            del self.user_input[chat_id]
        await self.show_processes(call, chat_id)

    async def show_system_info(self, call, chat_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            system_info = f"üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:</b>\n\n"

            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            import platform
            system_info += f"üñ•Ô∏è –û–°: {platform.system()} {platform.release()}\n"
            system_info += f"üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {platform.architecture()[0]}\n"
            system_info += f"üñ•Ô∏è –ú–∞—à–∏–Ω–∞: {platform.machine()}\n"
            system_info += f"üíª –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {platform.processor()}\n"

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏
            try:
                with open('/proc/meminfo', 'r') as f:
                    meminfo = f.read()
                    for line in meminfo.split('\n'):
                        if 'MemTotal' in line:
                            total_mem = int(line.split()[1]) * 1024
                            system_info += f"üíæ –ü–∞–º—è—Ç—å: {self._format_size(total_mem)}\n"
                            break
            except:
                pass

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–∞—Ö
            try:
                disk_usage = shutil.disk_usage('/')
                system_info += f"üíø –î–∏—Å–∫: {self._format_size(disk_usage.used)}/{self._format_size(disk_usage.total)}\n"
            except:
                pass

            # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
            try:
                with open('/proc/uptime', 'r') as f:
                    uptime_seconds = float(f.read().split()[0])
                    hours, remainder = divmod(uptime_seconds, 3600)
                    minutes, seconds = divmod(remainder, 60)
                    system_info += f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {int(hours)}h {int(minutes)}m {int(seconds)}s\n"
            except:
                pass

            # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã
            try:
                load_avg = os.getloadavg()
                system_info += f"üìà –ó–∞–≥—Ä—É–∑–∫–∞: {load_avg[0]:.2f} {load_avg[1]:.2f} {load_avg[2]:.2f}\n"
            except:
                pass

            buttons = [
                [
                    {"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "callback": self.show_system_info, "args": (chat_id,)},
                    {"text": "üìä –ü—Ä–æ—Ü–µ—Å—Å—ã", "callback": self.show_processes, "args": (chat_id,)}
                ],
                [
                    {"text": "üîô –ù–∞–∑–∞–¥", "callback": self.open_terminal, "args": (chat_id,)}
                ]
            ]

            await call.edit(system_info, reply_markup=buttons)

        except Exception as e:
            await call.answer(self.strings["error"].format(error=str(e)))

    async def show_terminal_help(self, call, chat_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å –ø–æ —Ç–µ—Ä–º–∏–Ω–∞–ª—É"""
        help_text = """‚ùì <b>–ü–æ–º–æ—â—å –ø–æ —Ç–µ—Ä–º–∏–Ω–∞–ª—É:</b>

üîß <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ <code>ls</code> - —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
‚Ä¢ <code>cd</code> - —Å–º–µ–Ω–∞ –ø–∞–ø–∫–∏
‚Ä¢ <code>pwd</code> - —Ç–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞
‚Ä¢ <code>mkdir</code> - —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É
‚Ä¢ <code>rm</code> - —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª
‚Ä¢ <code>cp</code> - –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
‚Ä¢ <code>mv</code> - –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å

üìä <b>–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ <code>ps</code> - –ø—Ä–æ—Ü–µ—Å—Å—ã
‚Ä¢ <code>top</code> - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
‚Ä¢ <code>df</code> - –¥–∏—Å–∫–∏
‚Ä¢ <code>free</code> - –ø–∞–º—è—Ç—å
‚Ä¢ <code>uname</code> - —Å–∏—Å—Ç–µ–º–∞

üåê <b>–°–µ—Ç—å:</b>
‚Ä¢ <code>ping</code> - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏
‚Ä¢ <code>curl</code> - HTTP –∑–∞–ø—Ä–æ—Å—ã
‚Ä¢ <code>wget</code> - –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤

üêç <b>Python:</b>
‚Ä¢ <code>python script.py</code> - –∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
‚Ä¢ <code>pip install</code> - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤

‚ö†Ô∏è <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>
‚Ä¢ –¢–∞–π–º–∞—É—Ç: {timeout}—Å
‚Ä¢ –û–ø–∞—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ç—Ä–µ–±—É—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
‚Ä¢ –í—ã–≤–æ–¥ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω {max_output} —Å–∏–º–≤–æ–ª–∞–º–∏""".format(
            timeout=self.config["terminal_timeout"],
            max_output=self.config["max_output_length"]
        )

        buttons = [
            [
                {"text": "üîô –ù–∞–∑–∞–¥", "callback": self.open_terminal, "args": (chat_id,)}
            ]
        ]

        await call.edit(help_text, reply_markup=buttons)

    async def clear_terminal(self, call, chat_id):
        """–û—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª"""
        if chat_id in self.terminal_sessions:
            self.terminal_sessions[chat_id]["history"] = []
        await call.answer("üóëÔ∏è –¢–µ—Ä–º–∏–Ω–∞–ª –æ—á–∏—â–µ–Ω")
        await self.open_terminal(call, chat_id)

    async def close_terminal(self, call, chat_id):
        """–ó–∞–∫—Ä—ã—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª"""
        if chat_id in self.terminal_sessions:
            del self.terminal_sessions[chat_id]
        if chat_id in self.running_processes:
            try:
                self.running_processes[chat_id].kill()
                del self.running_processes[chat_id]
            except:
                pass
        await call.answer(self.strings["terminal_closed"])
        await self.back_to_folder(call, chat_id)

    async def download_file(self, call, chat_id, file_path):
        """–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª"""
        try:
            file_size = os.path.getsize(file_path)
            max_size = self.config["max_file_size"] * 1024 * 1024

            if file_size > max_size:
                await call.answer(self.strings["file_too_large"])
                return

            await call.answer("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...")
            await self._client.send_file(
                chat_id,
                file_path,
                caption=f"üìÅ {os.path.basename(file_path)}\nüìè {self._format_size(file_size)}"
            )

        except Exception as e:
            await call.answer(self.strings["error"].format(error=str(e)))

    async def view_file(self, call, chat_id, file_path):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–∞"""
        try:
            file_ext = Path(file_path).suffix.lower()

            if file_ext in ['.txt', '.py', '.js', '.html', '.css', '.json', '.xml', '.yml', '.yaml', '.ini', '.cfg', '.conf', '.log']:
                await self._view_text_file(call, chat_id, file_path)
            elif file_ext in ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp']:
                await self._view_image_file(call, chat_id, file_path)
            else:
                await call.answer("üëÅÔ∏è –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞")

        except Exception as e:
            await call.answer(self.strings["error"].format(error=str(e)))

    async def _view_text_file(self, call, chat_id, file_path):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read(2000)

            if len(content) >= 2000:
                content += "\n... (—Ñ–∞–π–ª –æ–±—Ä–µ–∑–∞–Ω)"

            text = f"üìÑ <b>{os.path.basename(file_path)}</b>\n\n<pre>{content}</pre>"

            buttons = [
                [
                    {"text": "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "callback": self.edit_file, "args": (chat_id, file_path)},
                    {"text": "üì§ –°–∫–∞—á–∞—Ç—å", "callback": self.download_file, "args": (chat_id, file_path)}
                ],
                [
                    {"text": "üîô –ù–∞–∑–∞–¥", "callback": self.back_to_file_actions, "args": (chat_id, file_path)}
                ]
            ]

            await call.edit(text, reply_markup=buttons)

        except UnicodeDecodeError:
            await call.answer("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –∫–∞–∫ —Ç–µ–∫—Å—Ç")
        except Exception as e:
            await call.answer(self.strings["error"].format(error=str(e)))

    async def _view_image_file(self, call, chat_id, file_path):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            file_size = os.path.getsize(file_path)
            max_size = self.config["max_file_size"] * 1024 * 1024

            if file_size > max_size:
                await call.answer(self.strings["file_too_large"])
                return

            await call.answer("üñºÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
            await self._client.send_file(
                chat_id,
                file_path,
                caption=f"üñºÔ∏è {os.path.basename(file_path)}"
            )

        except Exception as e:
            await call.answer(self.strings["error"].format(error=str(e)))

    async def edit_file(self, call, chat_id, file_path):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª"""
        try:
            file_ext = Path(file_path).suffix.lower()

            if file_ext in ['.txt', '.py', '.js', '.html', '.css', '.json', '.xml', '.yml', '.yaml', '.ini', '.cfg', '.conf', '.log']:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()

                if len(content) > 4000:
                    await call.answer("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                    return

                text = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {os.path.basename(file_path)}</b>\n\n"
                text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:"

                self.user_input[chat_id] = {
                    "action": "edit_file",
                    "file_path": file_path,
                    "original_content": content
                }

                buttons = [
                    [
                        {"text": "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "callback": self.cancel_edit, "args": (chat_id, file_path)}
                    ]
                ]

                await call.edit(text, reply_markup=buttons)

            else:
                await call.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞")

        except Exception as e:
            await call.answer(self.strings["error"].format(error=str(e)))

    async def copy_file(self, call, chat_id, file_path):
        """–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª"""
        self.clipboard[chat_id] = {"action": "copy", "path": file_path}
        file_name = os.path.basename(file_path)
        await call.answer(f"üìã –§–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {file_name}")

    async def cut_file(self, call, chat_id, file_path):
        """–í—ã—Ä–µ–∑–∞—Ç—å —Ñ–∞–π–ª"""
        self.clipboard[chat_id] = {"action": "move", "path": file_path}
        file_name = os.path.basename(file_path)
        await call.answer(f"‚úÇÔ∏è –§–∞–π–ª –≤—ã—Ä–µ–∑–∞–Ω: {file_name}")

    async def paste_file(self, call, chat_id):
        """–í—Å—Ç–∞–≤–∏—Ç—å —Ñ–∞–π–ª"""
        try:
            if chat_id not in self.clipboard or not self.clipboard[chat_id]:
                await call.answer(self.strings["nothing_to_paste"])
                return

            clipboard_data = self.clipboard[chat_id]
            source_path = clipboard_data["path"]
            action = clipboard_data["action"]

            if not os.path.exists(source_path):
                await call.answer(self.strings["file_not_found"].format(path=source_path))
                return

            dest_dir = self.current_dirs[chat_id]
            file_name = os.path.basename(source_path)
            dest_path = os.path.join(dest_dir, file_name)

            if os.path.exists(dest_path):
                await call.answer(self.strings["file_exists"])
                return

            if action == "copy":
                if os.path.isdir(source_path):
                    shutil.copytree(source_path, dest_path)
                else:
                    shutil.copy2(source_path, dest_path)
                await call.answer(self.strings["file_copied"].format(name=file_name))
            elif action == "move":
                shutil.move(source_path, dest_path)
                await call.answer(self.strings["file_moved"].format(name=file_name))
                self.clipboard[chat_id] = {}

            await self._show_file_manager(call, chat_id)

        except Exception as e:
            await call.answer(self.strings["error"].format(error=str(e)))

    async def clear_clipboard(self, call, chat_id):
        """–û—á–∏—Å—Ç–∏—Ç—å –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        self.clipboard[chat_id] = {}
        await call.answer("üìã –ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –æ—á–∏—â–µ–Ω")

    async def rename_file(self, call, chat_id, file_path):
        """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ñ–∞–π–ª"""
        try:
            file_name = os.path.basename(file_path)
            text = f"üìù <b>–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {file_name}</b>\n\n"
            text += self.strings["rename_prompt"]

            self.user_input[chat_id] = {
                "action": "rename_file",
                "file_path": file_path,
                "original_name": file_name
            }

            buttons = [
                [
                    {"text": "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "callback": self.cancel_rename, "args": (chat_id, file_path)}
                ]
            ]

            await call.edit(text, reply_markup=buttons)

        except Exception as e:
            await call.answer(self.strings["error"].format(error=str(e)))

    async def delete_item(self, call, chat_id, item_path):
        """–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç (—Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫—É)"""
        try:
            item_name = os.path.basename(item_path)

            if self.config["enable_trash"]:
                trash_path = os.path.join(self.trash_path, f"{int(time.time())}_{item_name}")
                shutil.move(item_path, trash_path)

                if chat_id not in self.trash_bin:
                    self.trash_bin[chat_id] = []
                self.trash_bin[chat_id].append({
                    "original_path": item_path,
                    "trash_path": trash_path,
                    "deleted_time": time.time(),
                    "name": item_name
                })

                await call.answer(self.strings["file_deleted"].format(name=item_name))
            else:
                if os.path.isdir(item_path):
                    shutil.rmtree(item_path)
                else:
                    os.remove(item_path)
                await call.answer(self.strings["file_deleted"].format(name=item_name))

            await self.back_to_folder(call, chat_id)

        except Exception as e:
            await call.answer(self.strings["error"].format(error=str(e)))

    async def clear_folder_content(self, call, chat_id, folder_path):
        """–û—á–∏—Å—Ç–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏"""
        try:
            folder_name = os.path.basename(folder_path)
            confirm_text = f"üßπ –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ <b>{folder_name}</b>?\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å."

            buttons = [
                [
                    {"text": "‚úÖ –û—á–∏—Å—Ç–∏—Ç—å", "callback": self._perform_clear_folder_content, "args": (chat_id, folder_path)},
                    {"text": "‚ùå –û—Ç–º–µ–Ω–∞", "callback": self.back_to_folder, "args": (chat_id,)}
                ]
            ]
            await call.edit(confirm_text, reply_markup=buttons)

        except Exception as e:
            await call.answer(self.strings["error"].format(error=str(e)))

    async def _perform_clear_folder_content(self, call, chat_id, folder_path):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ—á–∏—Å—Ç–∫—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–ø–∫–∏"""
        try:
            deleted_count = 0
            for item_name in os.listdir(folder_path):
                item_path = os.path.join(folder_path, item_name)
                try:
                    if os.path.isfile(item_path):
                        os.remove(item_path)
                    elif os.path.isdir(item_path):
                        shutil.rmtree(item_path)
                    deleted_count += 1
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {item_path}: {e}")

            await call.answer(f"üßπ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ {os.path.basename(folder_path)} –æ—á–∏—â–µ–Ω–æ. –£–¥–∞–ª–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {deleted_count}")
            await self.back_to_folder(call, chat_id)

        except Exception as e:
            await call.answer(self.strings["error"].format(error=str(e)))


    async def create_folder(self, call, chat_id):
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞–ø–∫—É"""
        try:
            text = "üìÅ <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏</b>\n\n"
            text += self.strings["create_folder_name"]

            self.user_input[chat_id] = {
                "action": "create_folder",
                "parent_path": self.current_dirs[chat_id]
            }

            buttons = [
                [
                    {"text": "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "callback": self.cancel_create_folder, "args": (chat_id,)}
                ]
            ]

            await call.edit(text, reply_markup=buttons)

        except Exception as e:
            await call.answer(self.strings["error"].format(error=str(e)))

    async def upload_file(self, call, chat_id):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª"""
        text = "üì§ <b>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞</b>\n\n"
        text += self.strings["upload_file"]
        text += f"\n\nüìÅ –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: <code>{self.current_dirs[chat_id]}</code>"

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        self.user_input[chat_id] = {
            "action": "upload_file",
            "timestamp": time.time()
        }

        buttons = [
            [
                {"text": "üîô –ù–∞–∑–∞–¥", "callback": self.back_to_folder, "args": (chat_id,)}
            ]
        ]

        await call.edit(text, reply_markup=buttons)

    async def search_files(self, call, chat_id):
        """–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤"""
        try:
            text = "üîç <b>–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤</b>\n\n"
            text += self.strings["search_query"]

            self.user_input[chat_id] = {
                "action": "search_files",
                "search_path": self.current_dirs[chat_id]
            }

            buttons = [
                [
                    {"text": "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "callback": self.cancel_search, "args": (chat_id,)}
                ]
            ]

            await call.edit(text, reply_markup=buttons)

        except Exception as e:
            await call.answer(self.strings["error"].format(error=str(e)))

    async def _perform_search(self, chat_id, query):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫"""
        try:
            search_path = self.current_dirs[chat_id]
            results = []

            for root, dirs, files in os.walk(search_path):
                for file in files:
                    if query.lower() in file.lower():
                        file_path = os.path.join(root, file)
                        results.append(file_path)

                for dir in dirs:
                    if query.lower() in dir.lower():
                        dir_path = os.path.join(root, dir)
                        results.append(dir_path)

            self.search_results[chat_id] = results
            return results

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            return []

    async def show_search_results(self, call, chat_id, results):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞"""
        try:
            if not results:
                await call.answer("üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return

            text = self.strings["search_results"].format(count=len(results))

            buttons = []
            for i, result in enumerate(results[:10]):
                relative_path = os.path.relpath(result, self.current_dirs[chat_id])
                name = os.path.basename(result)

                if os.path.isdir(result):
                    icon = "üìÅ"
                    callback = self.open_search_folder
                else:
                    icon = self._get_file_icon(name)
                    callback = self.open_search_file

                button_text = f"{icon} {relative_path}"
                if len(button_text) > 30:
                    button_text = button_text[:27] + "..."

                buttons.append([
                    {"text": button_text, "callback": callback, "args": (chat_id, result)}
                ])

            if len(results) > 10:
                text += f"\n... –∏ –µ—â–µ {len(results) - 10} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"

            buttons.append([
                {"text": "üîô –ù–∞–∑–∞–¥", "callback": self.back_to_folder, "args": (chat_id,)}
            ])

            await call.edit(text, reply_markup=buttons)

        except Exception as e:
            await call.answer(self.strings["error"].format(error=str(e)))

    async def open_search_folder(self, call, chat_id, folder_path):
        """–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        await self.open_folder(call, chat_id, folder_path)

    async def open_search_file(self, call, chat_id, file_path):
        """–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        await self.file_actions(call, chat_id, file_path)

    async def select_all(self, call, chat_id):
        """–í—ã–±—Ä–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã"""
        try:
            current_path = self.current_dirs[chat_id]
            items = await self._get_directory_contents(current_path, chat_id)

            self.selection[chat_id] = [item["path"] for item in items]

            await call.answer(self.strings["selected_count"].format(count=len(self.selection[chat_id])))
            await self._show_file_manager(call, chat_id)

        except Exception as e:
            await call.answer(self.strings["error"].format(error=str(e)))

    async def deselect_all(self, call, chat_id):
        """–°–Ω—è—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤"""
        self.selection[chat_id] = []
        await call.answer("‚ùå –í—ã–¥–µ–ª–µ–Ω–∏–µ —Å–Ω—è—Ç–æ")
        await self._show_file_manager(call, chat_id)

    async def batch_operations(self, call, chat_id):
        """–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏"""
        try:
            if not self.selection[chat_id]:
                await call.answer("‚ùå –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
                return

            count = len(self.selection[chat_id])
            text = f"‚öôÔ∏è <b>–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏</b>\n\n"
            text += self.strings["selected_count"].format(count=count)

            buttons = [
                [
                    {"text": "üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", "callback": self.batch_copy, "args": (chat_id,)},
                    {"text": "‚úÇÔ∏è –í—ã—Ä–µ–∑–∞—Ç—å", "callback": self.batch_cut, "args": (chat_id,)},
                    {"text": "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", "callback": self.batch_delete, "args": (chat_id,)}
                ],
                [
                    {"text": "üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å", "callback": self.batch_archive, "args": (chat_id,)},
                    {"text": "üîê –®–∏—Ñ—Ä–æ–≤–∞—Ç—å", "callback": self.batch_encrypt, "args": (chat_id,)},
                    {"text": "üîí –ü—Ä–∞–≤–∞", "callback": self.batch_permissions, "args": (chat_id,)}
                ],
                [
                    {"text": "üìä –°–≤–æ–π—Å—Ç–≤–∞", "callback": self.batch_properties, "args": (chat_id,)},
                    {"text": "‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", "callback": self.batch_favorites, "args": (chat_id,)},
                    {"text": "üîó –°—Å—ã–ª–∫–∏", "callback": self.batch_links, "args": (chat_id,)}
                ],
                [
                    {"text": "üîô –ù–∞–∑–∞–¥", "callback": self.back_to_folder, "args": (chat_id,)}
                ]
            ]

            await call.edit(text, reply_markup=buttons)

        except Exception as e:
            await call.answer(self.strings["error"].format(error=str(e)))

    async def batch_copy(self, call, chat_id):
        """–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        self.clipboard[chat_id] = {"action": "copy", "paths": self.selection[chat_id].copy()}
        count = len(self.selection[chat_id])
        await call.answer(f"üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {count}")

    async def batch_cut(self, call, chat_id):
        """–í—ã—Ä–µ–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        self.clipboard[chat_id] = {"action": "move", "paths": self.selection[chat_id].copy()}
        count = len(self.selection[chat_id])
        await call.answer(f"‚úÇÔ∏è –í—ã—Ä–µ–∑–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {count}")

    async def batch_delete(self, call, chat_id):
        """–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        try:
            deleted_count = 0
            for file_path in self.selection[chat_id]:
                try:
                    file_name = os.path.basename(file_path)

                    if self.config["enable_trash"]:
                        trash_path = os.path.join(self.trash_path, f"{int(time.time())}_{file_name}")
                        shutil.move(file_path, trash_path)

                        if chat_id not in self.trash_bin:
                            self.trash_bin[chat_id] = []
                        self.trash_bin[chat_id].append({
                            "original_path": file_path,
                            "trash_path": trash_path,
                            "deleted_time": time.time(),
                            "name": file_name
                        })
                    else:
                        if os.path.isdir(file_path):
                            shutil.rmtree(file_path)
                        else:
                            os.remove(file_path)
                    deleted_count += 1

                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {file_path}: {e}")

            self.selection[chat_id] = []
            await call.answer(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {deleted_count}")
            await self._show_file_manager(call, chat_id)

        except Exception as e:
            await call.answer(self.strings["error"].format(error=str(e)))

    async def batch_archive(self, call, chat_id):
        """–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        try:
            if not self.selection[chat_id]:
                await call.answer("‚ùå –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
                return

            archive_name = f"archive_{int(time.time())}.zip"
            archive_path = os.path.join(self.current_dirs[chat_id], archive_name)

            with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                for file_path in self.selection[chat_id]:
                    if os.path.isfile(file_path):
                        arcname = os.path.relpath(file_path, self.current_dirs[chat_id])
                        zipf.write(file_path, arcname)
                    elif os.path.isdir(file_path):
                        for root, dirs, files in os.walk(file_path):
                            for file in files:
                                file_full_path = os.path.join(root, file)
                                arcname = os.path.relpath(file_full_path, self.current_dirs[chat_id])
                                zipf.write(file_full_path, arcname)

            await call.answer(self.strings["archive_created"].format(name=archive_name))
            await self._show_file_manager(call, chat_id)

        except Exception as e:
            await call.answer(self.strings["error"].format(error=str(e)))

    async def batch_encrypt(self, call, chat_id):
        """–ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        await call.answer("üîê –§—É–Ω–∫—Ü–∏—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")

    async def batch_permissions(self, call, chat_id):
        """–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        await call.answer("üîí –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")

    async def batch_properties(self, call, chat_id):
        """–°–≤–æ–π—Å—Ç–≤–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            if not self.selection[chat_id]:
                await call.answer("‚ùå –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
                return

            total_size = 0
            file_count = 0
            dir_count = 0

            for file_path in self.selection[chat_id]:
                if os.path.isfile(file_path):
                    file_count += 1
                    total_size += os.path.getsize(file_path)
                elif os.path.isdir(file_path):
                    dir_count += 1
                    for root, dirs, files in os.walk(file_path):
                        for file in files:
                            try:
                                total_size += os.path.getsize(os.path.join(root, file))
                                file_count += 1
                            except:
                                pass
                        dir_count += len(dirs)

            text = f"üìä <b>–°–≤–æ–π—Å—Ç–≤–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤</b>\n\n"
            text += f"üìÅ –ü–∞–ø–æ–∫: {dir_count}\n"
            text += f"üìÑ –§–∞–π–ª–æ–≤: {file_count}\n"
            text += f"üìè –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {self._format_size(total_size)}\n"

            buttons = [
                [
                    {"text": "üîô –ù–∞–∑–∞–¥", "callback": self.batch_operations, "args": (chat_id,)}
                ]
            ]

            await call.edit(text, reply_markup=buttons)

        except Exception as e:
            await call.answer(self.strings["error"].format(error=str(e)))

    async def batch_favorites(self, call, chat_id):
        """–î–æ–±–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
        if chat_id not in self.favorites:
            self.favorites[chat_id] = []

        added_count = 0
        for file_path in self.selection[chat_id]:
            if file_path not in self.favorites[chat_id]:
                self.favorites[chat_id].append(file_path)
                added_count += 1

        await self._save_favorites()
        await call.answer(f"‚≠ê –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {added_count}")

    async def batch_links(self, call, chat_id):
        """–°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        await call.answer("üîó –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")

    async def go_up(self, call, chat_id):
        """–ü–æ–¥–Ω—è—Ç—å—Å—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤–≤–µ—Ä—Ö"""
        current_path = self.current_dirs[chat_id]
        parent_path = os.path.dirname(current_path)

        if parent_path != current_path:
            self.current_dirs[chat_id] = parent_path
            self.page_offset[chat_id] = 0
            await self._show_file_manager(call, chat_id)
        else:
            await call.answer("‚¨ÜÔ∏è –£–∂–µ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ")

    async def go_home(self, call, chat_id):
        """–ü–µ—Ä–µ–π—Ç–∏ –≤ –¥–æ–º–∞—à–Ω—é—é –ø–∞–ø–∫—É"""
        home_path = os.path.expanduser("~")
        self.current_dirs[chat_id] = home_path
        self.page_offset[chat_id] = 0
        await self._show_file_manager(call, chat_id)

    async def go_root(self, call, chat_id):
        """–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É"""
        self.current_dirs[chat_id] = "/"
        self.page_offset[chat_id] = 0
        await self._show_file_manager(call, chat_id)

    async def toggle_hidden(self, call, chat_id):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–æ–∫–∞–∑ —Å–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        self.config["show_hidden"] = not self.config["show_hidden"]
        if self.config["show_hidden"]:
            await call.answer(self.strings["hidden_files_shown"])
        else:
            await call.answer(self.strings["hidden_files_hidden"])
        await self._show_file_manager(call, chat_id)

    async def change_sort(self, call, chat_id):
        """–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É"""
        current_sort = self.sort_order[chat_id]["by"]
        sort_options = ["name", "size", "date", "type"]

        try:
            current_index = sort_options.index(current_sort)
            next_index = (current_index + 1) % len(sort_options)
            new_sort = sort_options[next_index]

            self.sort_order[chat_id]["by"] = new_sort

            sort_names = {"name": "–ø–æ –∏–º–µ–Ω–∏", "size": "–ø–æ —Ä–∞–∑–º–µ—Ä—É", "date": "–ø–æ –¥–∞—Ç–µ", "type": "–ø–æ —Ç–∏–ø—É"}
            await call.answer(self.strings["sort_changed"].format(sort=sort_names[new_sort]))
            await self._show_file_manager(call, chat_id)

        except ValueError:
            self.sort_order[chat_id]["by"] = "name"
            await self._show_file_manager(call, chat_id)

    async def prev_page(self, call, chat_id):
        """–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
        if self.page_offset[chat_id] > 0:
            self.page_offset[chat_id] -= 1
            await self._show_file_manager(call, chat_id)

    async def next_page(self, call, chat_id):
        """–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
        self.page_offset[chat_id] += 1
        await self._show_file_manager(call, chat_id)

    async def show_page_info(self, call, chat_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        current_page = self.page_offset[chat_id] + 1
        await call.answer(f"üìÑ –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {current_page}")

    async def show_favorites(self, call, chat_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
        try:
            if chat_id not in self.favorites or not self.favorites[chat_id]:
                await call.answer(self.strings["favorites_empty"])
                return

            text = "‚≠ê <b>–ò–∑–±—Ä–∞–Ω–Ω–æ–µ</b>\n\n"

            buttons = []
            for i, fav_path in enumerate(self.favorites[chat_id][:10]):
                if os.path.exists(fav_path):
                    name = os.path.basename(fav_path)
                    if os.path.isdir(fav_path):
                        icon = "üìÅ"
                        callback = self.open_favorite_folder
                    else:
                        icon = self._get_file_icon(name)
                        callback = self.open_favorite_file

                    button_text = f"{icon} {name}"
                    if len(button_text) > 25:
                        button_text = button_text[:22] + "..."

                    buttons.append([
                        {"text": button_text, "callback": callback, "args": (chat_id, fav_path)},
                        {"text": "‚ùå", "callback": self.remove_from_favorites, "args": (chat_id, fav_path)}
                    ])

            if not buttons:
                await call.answer(self.strings["favorites_empty"])
                return

            buttons.append([
                {"text": "üîô –ù–∞–∑–∞–¥", "callback": self.back_to_folder, "args": (chat_id,)}
            ])

            await call.edit(text, reply_markup=buttons)

        except Exception as e:
            await call.answer(self.strings["error"].format(error=str(e)))

    async def open_favorite_folder(self, call, chat_id, folder_path):
        """–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
        await self.open_folder(call, chat_id, folder_path)

    async def open_favorite_file(self, call, chat_id, file_path):
        """–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
        await self.file_actions(call, chat_id, file_path)

    async def add_to_favorites(self, call, chat_id, file_path):
        """–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
        if chat_id not in self.favorites:
            self.favorites[chat_id] = []

        if file_path not in self.favorites[chat_id]:
            self.favorites[chat_id].append(file_path)
            await self._save_favorites()
            file_name = os.path.basename(file_path)
            await call.answer(self.strings["added_to_favorites"].format(name=file_name))
        else:
            await call.answer("‚≠ê –£–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")

    async def remove_from_favorites(self, call, chat_id, file_path):
        """–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
        if chat_id in self.favorites and file_path in self.favorites[chat_id]:
            self.favorites[chat_id].remove(file_path)
            await self._save_favorites()
            file_name = os.path.basename(file_path)
            await call.answer(self.strings["removed_from_favorites"].format(name=file_name))
            await self.show_favorites(call, chat_id)

    async def show_recent(self, call, chat_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–µ —Ñ–∞–π–ª—ã"""
        try:
            if chat_id not in self.recent_files or not self.recent_files[chat_id]:
                await call.answer("üìã –ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤")
                return

            text = "üìã <b>–ù–µ–¥–∞–≤–Ω–∏–µ —Ñ–∞–π–ª—ã</b>\n\n"

            buttons = []
            for recent_path in self.recent_files[chat_id][:10]:
                if os.path.exists(recent_path):
                    name = os.path.basename(recent_path)
                    if os.path.isdir(recent_path):
                        icon = "üìÅ"
                        callback = self.open_recent_folder
                    else:
                        icon = self._get_file_icon(name)
                        callback = self.open_recent_file

                    button_text = f"{icon} {name}"
                    if len(button_text) > 30:
                        button_text = button_text[:27] + "..."

                    buttons.append([
                        {"text": button_text, "callback": callback, "args": (chat_id, recent_path)}
                    ])

            if not buttons:
                await call.answer("üìã –ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤")
                return

            buttons.append([
                {"text": "üîô –ù–∞–∑–∞–¥", "callback": self.back_to_folder, "args": (chat_id,)}
            ])

            await call.edit(text, reply_markup=buttons)

        except Exception as e:
            await call.answer(self.strings["error"].format(error=str(e)))

    async def open_recent_folder(self, call, chat_id, folder_path):
        """–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É –∏–∑ –Ω–µ–¥–∞–≤–Ω–∏—Ö"""
        await self.open_folder(call, chat_id, folder_path)

    async def open_recent_file(self, call, chat_id, file_path):
        """–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –∏–∑ –Ω–µ–¥–∞–≤–Ω–∏—Ö"""
        await self.file_actions(call, chat_id, file_path)

    async def show_trash(self, call, chat_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É"""
        try:
            if chat_id not in self.trash_bin or not self.trash_bin[chat_id]:
                await call.answer(self.strings["trash_empty"])
                return

            text = "üóëÔ∏è <b>–ö–æ—Ä–∑–∏–Ω–∞</b>\n\n"

            buttons = []
            for item in self.trash_bin[chat_id][:10]:
                if os.path.exists(item["trash_path"]):
                    deleted_time = datetime.fromtimestamp(item["deleted_time"]).strftime("%d.%m %H:%M")
                    button_text = f"üóëÔ∏è {item['name']} ({deleted_time})"
                    if len(button_text) > 35:
                        button_text = button_text[:32] + "..."

                    buttons.append([
                        {"text": button_text, "callback": self.view_trash_item, "args": (chat_id, item["trash_path"])},
                        {"text": "‚ôªÔ∏è", "callback": self.restore_from_trash, "args": (chat_id, item["trash_path"])}
                    ])

            if not buttons:
                await call.answer(self.strings["trash_empty"])
                return

            buttons.append([
                {"text": "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", "callback": self.empty_trash, "args": (chat_id,)},
                {"text": "üîô –ù–∞–∑–∞–¥", "callback": self.back_to_folder, "args": (chat_id,)}
            ])

            await call.edit(text, reply_markup=buttons)

        except Exception as e:
            await call.answer(self.strings["error"].format(error=str(e)))

    async def view_trash_item(self, call, chat_id, trash_path):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã"""
        await self.file_actions(call, chat_id, trash_path)

    async def restore_from_trash(self, call, chat_id, trash_path):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
        try:
            trash_item = None
            for item in self.trash_bin[chat_id]:
                if item["trash_path"] == trash_path:
                    trash_item = item
                    break

            if not trash_item:
                await call.answer("‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ")
                return

            original_path = trash_item["original_path"]

            if os.path.exists(original_path):
                await call.answer("‚ùå –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –º–µ—Å—Ç–µ")
                return

            os.makedirs(os.path.dirname(original_path), exist_ok=True)
            shutil.move(trash_path, original_path)

            self.trash_bin[chat_id].remove(trash_item)

            await call.answer(self.strings["trash_restored"].format(name=trash_item["name"]))
            await self.show_trash(call, chat_id)

        except Exception as e:
            await call.answer(self.strings["error"].format(error=str(e)))

    async def empty_trash(self, call, chat_id):
        """–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"""
        try:
            if chat_id not in self.trash_bin or not self.trash_bin[chat_id]:
                await call.answer(self.strings["trash_empty"])
                return

            removed_count = 0
            for item in self.trash_bin[chat_id]:
                try:
                    if os.path.exists(item["trash_path"]):
                        if os.path.isdir(item["trash_path"]):
                            shutil.rmtree(item["trash_path"])
                        else:
                            os.remove(item["trash_path"])
                        removed_count += 1
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {item['trash_path']}: {e}")

            self.trash_bin[chat_id] = []
            await call.answer(self.strings["trash_emptied"])
            await self.back_to_folder(call, chat_id)

        except Exception as e:
            await call.answer(self.strings["error"].format(error=str(e)))

    async def change_permissions(self, call, chat_id, file_path):
        """–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞"""
        try:
            permissions = self._get_file_permissions(file_path)

            text = f"üîí <b>–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞</b>\n\n"
            text += f"üìÑ –§–∞–π–ª: {os.path.basename(file_path)}\n"
            text += f"üîß –ü—Ä–∞–≤–∞: {permissions['mode']}\n"
            text += f"üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {permissions['owner']}\n"
            text += f"üë• –ì—Ä—É–ø–ø–∞: {permissions['group']}\n"
            text += f"üî¢ –í–æ—Å—å–º–µ—Ä–∏—á–Ω—ã–π: {permissions['octal']}\n"

            buttons = [
                [
                    {"text": "755", "callback": self.set_permissions, "args": (chat_id, file_path, "755")},
                    {"text": "644", "callback": self.set_permissions, "args": (chat_id, file_path, "644")},
                    {"text": "600", "callback": self.set_permissions, "args": (chat_id, file_path, "600")}
                ],
                [
                    {"text": "777", "callback": self.set_permissions, "args": (chat_id, file_path, "777")},
                    {"text": "666", "callback": self.set_permissions, "args": (chat_id, file_path, "666")},
                    {"text": "444", "callback": self.set_permissions, "args": (chat_id, file_path, "444")}
                ],
                [
                    {"text": "üîô –ù–∞–∑–∞–¥", "callback": self.back_to_file_actions, "args": (chat_id, file_path)}
                ]
            ]

            await call.edit(text, reply_markup=buttons)

        except Exception as e:
            await call.answer(self.strings["error"].format(error=str(e)))

    async def set_permissions(self, call, chat_id, file_path, mode):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞"""
        try:
            os.chmod(file_path, int(mode, 8))
            await call.answer(self.strings["permissions_changed"].format(name=os.path.basename(file_path)))
            await self.change_permissions(call, chat_id, file_path)

        except Exception as e:
            await call.answer(self.strings["error"].format(error=str(e)))

    async def encrypt_file(self, call, chat_id, file_path):
        """–ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª"""
        await call.answer(self.strings["encrypted"])

    async def archive_file(self, call, chat_id, file_path):
        """–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª"""
        try:
            archive_name = f"{os.path.basename(file_path)}.zip"
            archive_path = os.path.join(os.path.dirname(file_path), archive_name)

            with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                if os.path.isfile(file_path):
                    zipf.write(file_path, os.path.basename(file_path))
                elif os.path.isdir(file_path):
                    for root, dirs, files in os.walk(file_path):
                        for file in files:
                            file_full_path = os.path.join(root, file)
                            arcname = os.path.relpath(file_full_path, os.path.dirname(file_path))
                            zipf.write(file_full_path, arcname)

            await call.answer(self.strings["archive_created"].format(name=archive_name))

        except Exception as e:
            await call.answer(self.strings["error"].format(error=str(e)))

    async def create_link(self, call, chat_id, file_path):
        """–°–æ–∑–¥–∞—Ç—å —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É"""
        try:
            link_name = f"{os.path.basename(file_path)}_link"
            link_path = os.path.join(self.current_dirs[chat_id], link_name)

            os.symlink(file_path, link_path)
            await call.answer(self.strings["link_created"])

        except Exception as e:
            await call.answer(self.strings["error"].format(error=str(e)))

    async def show_properties(self, call, chat_id, file_path):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ —Ñ–∞–π–ª–∞"""
        try:
            if not os.path.exists(file_path):
                await call.answer(self.strings["file_not_found"].format(path=file_path))
                return

            file_stat = os.stat(file_path)
            file_name = os.path.basename(file_path)

            text = f"üìä <b>–°–≤–æ–π—Å—Ç–≤–∞ —Ñ–∞–π–ª–∞</b>\n\n"
            text += f"üìÑ –ò–º—è: {file_name}\n"
            text += f"üìÅ –ü—É—Ç—å: {file_path}\n"
            text += f"üìè –†–∞–∑–º–µ—Ä: {self._format_size(file_stat.st_size)}\n"
            text += f"üìÖ –°–æ–∑–¥–∞–Ω: {self._format_date(file_stat.st_ctime)}\n"
            text += f"üìÖ –ò–∑–º–µ–Ω–µ–Ω: {self._format_date(file_stat.st_mtime)}\n"
            text += f"üìÖ –î–æ—Å—Ç—É–ø: {self._format_date(file_stat.st_atime)}\n"

            permissions = self._get_file_permissions(file_path)
            text += f"üîß –ü—Ä–∞–≤–∞: {permissions['mode']}\n"
            text += f"üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {permissions['owner']}\n"
            text += f"üë• –ì—Ä—É–ø–ø–∞: {permissions['group']}\n"

            file_type = self._get_file_type(file_path)
            text += f"üìÑ –¢–∏–ø: {file_type}\n"

            if os.path.isfile(file_path):
                file_hash = self._get_file_hash(file_path)
                text += f"üîê MD5: {file_hash}\n"

            if os.path.islink(file_path):
                target = os.readlink(file_path)
                text += f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞: {target}\n"

            buttons = [
                [
                    {"text": "üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ö–µ—à", "callback": self.copy_hash, "args": (chat_id, file_path)},
                    {"text": "üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—É—Ç—å", "callback": self.copy_path, "args": (chat_id, file_path)}
                ],
                [
                    {"text": "üîô –ù–∞–∑–∞–¥", "callback": self.back_to_file_actions, "args": (chat_id, file_path)}
                ]
            ]

            await call.edit(text, reply_markup=buttons)

        except Exception as e:
            await call.answer(self.strings["error"].format(error=str(e)))

    async def copy_hash(self, call, chat_id, file_path):
        """–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ö–µ—à —Ñ–∞–π–ª–∞"""
        try:
            file_hash = self._get_file_hash(file_path)
            await call.answer(f"üìã MD5 —Ö–µ—à —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {file_hash}")

        except Exception as e:
            await call.answer(self.strings["error"].format(error=str(e)))

    async def copy_path(self, call, chat_id, file_path):
        """–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"""
        await call.answer(f"üìã –ü—É—Ç—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {file_path}")

    async def settings_menu(self, call, chat_id):
        """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            text = "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            text += f"üëÅÔ∏è –°–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã: {'‚úÖ' if self.config['show_hidden'] else '‚ùå'}\n"
            text += f"üìä –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {self.config['sort_by']}\n"
            text += f"üìÑ –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {self.config['items_per_page']}\n"
            text += f"üì§ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {self.config['max_file_size']} MB\n"
            text += f"üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞: {'‚úÖ' if self.config['enable_trash'] else '‚ùå'}\n"
            text += f"‚è∞ –¢–∞–π–º–∞—É—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª–∞: {self.config['terminal_timeout']}s\n"
            text += f"‚ö†Ô∏è –û–ø–∞—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: {'‚úÖ' if self.config['allow_dangerous_commands'] else '‚ùå'}\n"
            text += f"üìè –ú–∞–∫—Å. –¥–ª–∏–Ω–∞ –≤—ã–≤–æ–¥–∞: {self.config['max_output_length']}\n"
            text += f"üêç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Python: {'‚úÖ' if self.config['enable_python_execution'] else '‚ùå'}\n"

            buttons = [
                [
                    {"text": "üëÅÔ∏è –°–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã", "callback": self.toggle_hidden_setting, "args": (chat_id,)},
                    {"text": "üìä –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞", "callback": self.change_sort_setting, "args": (chat_id,)},
                    {"text": "üìÑ –≠–ª–µ–º–µ–Ω—Ç–æ–≤", "callback": self.change_page_size, "args": (chat_id,)}
                ],
                [
                    {"text": "üì§ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞", "callback": self.change_file_size, "args": (chat_id,)},
                    {"text": "üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞", "callback": self.toggle_trash, "args": (chat_id,)},
                    {"text": "‚è∞ –¢–∞–π–º–∞—É—Ç", "callback": self.change_timeout, "args": (chat_id,)}
                ],
                [
                    {"text": "‚ö†Ô∏è –û–ø–∞—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã", "callback": self.toggle_dangerous, "args": (chat_id,)},
                    {"text": "üìè –î–ª–∏–Ω–∞ –≤—ã–≤–æ–¥–∞", "callback": self.change_output_length, "args": (chat_id,)},
                    {"text": "üêç Python", "callback": self.toggle_python, "args": (chat_id,)}
                ],
                [
                    {"text": "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", "callback": self.save_settings, "args": (chat_id,)},
                    {"text": "üîÑ –°–±—Ä–æ—Å", "callback": self.reset_settings, "args": (chat_id,)},
                    {"text": "üîô –ù–∞–∑–∞–¥", "callback": self.back_to_folder, "args": (chat_id,)}
                ]
            ]

            await call.edit(text, reply_markup=buttons)

        except Exception as e:
            await call.answer(self.strings["error"].format(error=str(e)))

    async def toggle_hidden_setting(self, call, chat_id):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        self.config["show_hidden"] = not self.config["show_hidden"]
        await call.answer("üëÅÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∞")
        await self.settings_menu(call, chat_id)

    async def change_sort_setting(self, call, chat_id):
        """–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
        sort_options = ["name", "size", "date", "type"]
        current_sort = self.config["sort_by"]

        try:
            current_index = sort_options.index(current_sort)
            next_index = (current_index + 1) % len(sort_options)
            next_sort = sort_options[next_index]

            self.config["sort_by"] = next_sort
            await call.answer("üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∞")
            await self.settings_menu(call, chat_id)

        except ValueError:
            self.config["sort_by"] = "name"
            await self.settings_menu(call, chat_id)

    async def change_page_size(self, call, chat_id):
        """–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        sizes = [5, 10, 15, 20, 25, 30]
        current_size = self.config["items_per_page"]

        try:
            current_index = sizes.index(current_size)
            next_index = (current_index + 1) % len(sizes)
            next_size = sizes[next_index]

            self.config["items_per_page"] = next_size
            await call.answer("üìÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–∑–º–µ–Ω–µ–Ω–æ")
            await self.settings_menu(call, chat_id)

        except ValueError:
            self.config["items_per_page"] = 10
            await self.settings_menu(call, chat_id)

    async def change_file_size(self, call, chat_id):
        """–ò–∑–º–µ–Ω–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞"""
        sizes = [10, 25, 50, 100, 200, 500]
        current_size = self.config["max_file_size"]

        try:
            current_index = sizes.index(current_size)
            next_index = (current_index + 1) % len(sizes)
            next_size = sizes[next_index]

            self.config["max_file_size"] = next_size
            await call.answer("üì§ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏–∑–º–µ–Ω–µ–Ω")
            await self.settings_menu(call, chat_id)

        except ValueError:
            self.config["max_file_size"] = 50
            await self.settings_menu(call, chat_id)

    async def toggle_trash(self, call, chat_id):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"""
        self.config["enable_trash"] = not self.config["enable_trash"]
        await call.answer("üóëÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∞")
        await self.settings_menu(call, chat_id)

    async def change_timeout(self, call, chat_id):
        """–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–∞—É—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª–∞"""
        timeouts = [10, 30, 60, 120, 300]
        current_timeout = self.config["terminal_timeout"]

        try:
            current_index = timeouts.index(current_timeout)
            next_index = (current_index + 1) % len(timeouts)
            next_timeout = timeouts[next_index]

            self.config["terminal_timeout"] = next_timeout
            await call.answer("‚è∞ –¢–∞–π–º–∞—É—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω")
            await self.settings_menu(call, chat_id)

        except ValueError:
            self.config["terminal_timeout"] = 30
            await self.settings_menu(call, chat_id)

    async def toggle_dangerous(self, call, chat_id):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –æ–ø–∞—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"""
        self.config["allow_dangerous_commands"] = not self.config["allow_dangerous_commands"]
        await call.answer("‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø–∞—Å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏–∑–º–µ–Ω–µ–Ω–∞")
        await self.settings_menu(call, chat_id)

    async def change_output_length(self, call, chat_id):
        """–ò–∑–º–µ–Ω–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –≤—ã–≤–æ–¥–∞"""
        lengths = [1000, 2000, 3000, 4000]
        current_length = self.config["max_output_length"]

        try:
            current_index = lengths.index(current_length)
            next_index = (current_index + 1) % len(lengths)
            next_length = lengths[next_index]

            self.config["max_output_length"] = next_length
            await call.answer("üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –≤—ã–≤–æ–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–∞")
            await self.settings_menu(call, chat_id)

        except ValueError:
            self.config["max_output_length"] = 3000
            await self.settings_menu(call, chat_id)

    async def toggle_python(self, call, chat_id):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Python"""
        self.config["enable_python_execution"] = not self.config["enable_python_execution"]
        await call.answer("üêç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Python –∏–∑–º–µ–Ω–µ–Ω–∞")
        await self.settings_menu(call, chat_id)

    async def save_settings(self, call, chat_id):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        await call.answer(self.strings["settings_saved"])

    async def reset_settings(self, call, chat_id):
        """–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        self.config["show_hidden"] = False
        self.config["sort_by"] = "name"
        self.config["items_per_page"] = 10
        self.config["max_file_size"] = 50
        self.config["enable_trash"] = True
        self.config["terminal_timeout"] = 30
        self.config["allow_dangerous_commands"] = False
        self.config["max_output_length"] = 3000
        self.config["enable_python_execution"] = True

        await call.answer("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã")
        await self.settings_menu(call, chat_id)

    async def refresh_view(self, call, chat_id):
        """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ"""
        await self._show_file_manager(call, chat_id)

    async def back_to_folder(self, call, chat_id):
        """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–∞–ø–∫–µ"""
        await self._show_file_manager(call, chat_id)

    async def back_to_file_actions(self, call, chat_id, file_path):
        """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–µ–π—Å—Ç–≤–∏—è–º —Ñ–∞–π–ª–∞"""
        await self.file_actions(call, chat_id, file_path)

    async def cancel_edit(self, call, chat_id, file_path):
        """–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        if chat_id in self.user_input:
            del self.user_input[chat_id]
        await self.file_actions(call, chat_id, file_path)

    async def cancel_rename(self, call, chat_id, file_path):
        """–û—Ç–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"""
        if chat_id in self.user_input:
            del self.user_input[chat_id]
        await self.file_actions(call, chat_id, file_path)

    async def cancel_create_folder(self, call, chat_id):
        """–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏"""
        if chat_id in self.user_input:
            del self.user_input[chat_id]
        await self.back_to_folder(call, chat_id)

    async def cancel_search(self, call, chat_id):
        """–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫"""
        if chat_id in self.user_input:
            del self.user_input[chat_id]
        await self.back_to_folder(call, chat_id)

    async def watcher(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        chat_id = message.chat_id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ñ–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≤ —ç—Ç–æ–º —á–∞—Ç–µ
        if chat_id not in self.current_dirs:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
        if message.file:
            # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –∑–∞–≥—Ä—É–∑–∫–∏
            if (chat_id in self.user_input and
                self.user_input[chat_id].get("action") == "upload_file"):
                await self._handle_file_upload(message)
            # –ò–ª–∏ –µ—Å–ª–∏ —è–≤–Ω–æ –ø–æ–∫–∞–∑–∞–Ω–æ –æ–∫–Ω–æ –∑–∞–≥—Ä—É–∑–∫–∏ (—ç—Ç–æ —É—Å–ª–æ–≤–∏–µ, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–º –∫–æ–¥–µ, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ)
            # elif self.operation_mode.get(chat_id) == "upload":
            #     await self._handle_file_upload(message)
        elif message.text:
            # –†–µ–∞–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–≥–æ, –∫—Ç–æ –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É)
            if message.sender_id == self._client.id:
                await self._handle_text_input(message)

    async def _handle_file_upload(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞"""
        chat_id = message.chat_id

        try:
            file_name = None
            if message.file.name:
                file_name = message.file.name
            elif hasattr(message.media, 'document') and message.media.document.attributes:
                for attr in message.media.document.attributes:
                    if isinstance(attr, DocumentAttributeFilename):
                        file_name = attr.file_name
                        break

            if not file_name:
                file_name = f"file_{int(time.time())}"

            save_path = os.path.join(self.current_dirs[chat_id], file_name)

            await message.download_media(file=save_path)

            await utils.answer(
                message,
                self.strings["file_uploaded"].format(name=file_name)
            )

        except Exception as e:
            await utils.answer(
                message,
                self.strings["error"].format(error=str(e))
            )
        finally:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if chat_id in self.user_input and self.user_input[chat_id].get("action") == "upload_file":
                del self.user_input[chat_id]


    async def _handle_text_input(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥"""
        chat_id = message.chat_id

        if chat_id not in self.user_input:
            return

        try:
            user_data = self.user_input[chat_id]
            action = user_data["action"]

            if action == "create_folder":
                await self._handle_create_folder(message, chat_id, message.text)
            elif action == "rename_file":
                await self._handle_rename_file(message, chat_id, message.text)
            elif action == "edit_file":
                await self._handle_edit_file(message, chat_id, message.text)
            elif action == "search_files":
                await self._handle_search_files(message, chat_id, message.text)
            elif action == "enter_command":
                await self._handle_enter_command(message, chat_id, message.text)
            elif action == "kill_process":
                await self._handle_kill_process(message, chat_id, message.text)

        except Exception as e:
            await utils.answer(
                message,
                self.strings["error"].format(error=str(e))
            )

    async def _handle_create_folder(self, message, chat_id, folder_name):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏"""
        try:
            parent_path = self.user_input[chat_id]["parent_path"]
            folder_path = os.path.join(parent_path, folder_name)

            if os.path.exists(folder_path):
                await utils.answer(message, "‚ùå –ü–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return

            os.makedirs(folder_path)
            del self.user_input[chat_id]

            await utils.answer(
                message,
                self.strings["folder_created"].format(name=folder_name)
            )

        except Exception as e:
            await utils.answer(
                message,
                self.strings["error"].format(error=str(e))
            )

    async def _handle_rename_file(self, message, chat_id, new_name):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        try:
            old_path = self.user_input[chat_id]["file_path"]
            new_path = os.path.join(os.path.dirname(old_path), new_name)

            if os.path.exists(new_path):
                await utils.answer(message, "‚ùå –§–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return

            os.rename(old_path, new_path)
            old_name = self.user_input[chat_id]["original_name"]
            del self.user_input[chat_id]

            await utils.answer(
                message,
                self.strings["file_renamed"].format(old=old_name, new=new_name)
            )

        except Exception as e:
            await utils.answer(
                message,
                self.strings["error"].format(error=str(e))
            )

    async def _handle_edit_file(self, message, chat_id, new_content):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        try:
            file_path = self.user_input[chat_id]["file_path"]

            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(new_content)

            del self.user_input[chat_id]

            await utils.answer(
                message,
                self.strings["editor_saved"]
            )

        except Exception as e:
            await utils.answer(
                message,
                self.strings["error"].format(error=str(e))
            )

    async def _handle_search_files(self, message, chat_id, query):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤"""
        try:
            await utils.answer(message, self.strings["search_in_progress"])

            results = await self._perform_search(chat_id, query)
            del self.user_input[chat_id]

            if results:
                await self.show_search_results(message, chat_id, results)
            else:
                await utils.answer(message, "üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        except Exception as e:
            await utils.answer(
                message,
                self.strings["error"].format(error=str(e))
            )

    async def _handle_enter_command(self, message, chat_id, command):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã"""
        try:
            del self.user_input[chat_id]

            await utils.answer(message, self.strings["command_running"])

            if self._is_dangerous_command(command):
                if not self.config["allow_dangerous_commands"]:
                    await utils.answer(message, self.strings["command_not_allowed"])
                    return

            current_dir = self.terminal_sessions[chat_id]["current_dir"]

            if command.startswith("cd "):
                await self._handle_cd_command_text(message, chat_id, command)
                return

            process = subprocess.Popen(
                command,
                shell=True,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                cwd=current_dir
            )

            try:
                stdout, stderr = process.communicate(timeout=self.config["terminal_timeout"])

                if chat_id not in self.command_history:
                    self.command_history[chat_id] = []

                self.command_history[chat_id].append({
                    "command": command,
                    "timestamp": datetime.now().isoformat(),
                    "exit_code": process.returncode,
                    "output": stdout,
                    "error": stderr
                })

                if len(self.command_history[chat_id]) > 100:
                    self.command_history[chat_id] = self.command_history[chat_id][-100:]

                if process.returncode == 0:
                    output = stdout.strip()
                    if len(output) > self.config["max_output_length"]:
                        output = output[:self.config["max_output_length"]] + "\n... (–≤—ã–≤–æ–¥ –æ–±—Ä–µ–∑–∞–Ω)"

                    result_text = self.strings["command_output"].format(output=output or "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    await utils.answer(message, result_text)
                else:
                    error = stderr.strip()
                    if len(error) > self.config["max_output_length"]:
                        error = error[:self.config["max_output_length"]] + "\n... (–æ—à–∏–±–∫–∞ –æ–±—Ä–µ–∑–∞–Ω–∞)"

                    result_text = self.strings["command_error"].format(error=error or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    await utils.answer(message, result_text)

            except subprocess.TimeoutExpired:
                process.kill()
                await utils.answer(message, self.strings["command_timeout"])

        except Exception as e:
            await utils.answer(
                message,
                self.strings["error"].format(error=str(e))
            )

    async def _handle_cd_command_text(self, message, chat_id, command):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É cd –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        try:
            parts = command.split()
            if len(parts) < 2:
                target_dir = os.path.expanduser("~")
            else:
                target_dir = parts[1]

            current_dir = self.terminal_sessions[chat_id]["current_dir"]

            if target_dir == "..":
                new_dir = os.path.dirname(current_dir)
            elif target_dir.startswith("/"):
                new_dir = target_dir
            else:
                new_dir = os.path.join(current_dir, target_dir)

            new_dir = os.path.abspath(new_dir)

            if os.path.exists(new_dir) and os.path.isdir(new_dir):
                self.terminal_sessions[chat_id]["current_dir"] = new_dir
                self.current_dirs[chat_id] = new_dir
                await utils.answer(message, f"üìÅ –ü–µ—Ä–µ—Ö–æ–¥ –≤ {new_dir}")
            else:
                await utils.answer(message, f"‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {new_dir}")

        except Exception as e:
            await utils.answer(
                message,
                self.strings["error"].format(error=str(e))
            )

    async def _handle_kill_process(self, message, chat_id, pid_text):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É–±–∏–π—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        try:
            pid = int(pid_text.strip())

            process = subprocess.Popen(
                ["kill", str(pid)],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )

            stdout, stderr = process.communicate(timeout=10)

            if process.returncode == 0:
                await utils.answer(message, f"üíÄ –ü—Ä–æ—Ü–µ—Å—Å {pid} –∑–∞–≤–µ—Ä—à–µ–Ω")
            else:
                await utils.answer(message, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞: {stderr}")

            del self.user_input[chat_id]

        except ValueError:
            await utils.answer(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π PID")
        except Exception as e:
            await utils.answer(
                message,
                self.strings["error"].format(error=str(e))
            )