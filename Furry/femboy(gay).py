from telethon import events
from .. import loader, utils
from telethon.tl.types import Message
import random
import logging
import asyncio
import sqlite3
import base64
import os
from telethon.errors import ChannelPrivateError, ChannelInvalidError, PeerIdInvalidError

logger = logging.getLogger(__name__)

# –ë–∞–∑–æ–≤–∞—è –±–∞–∑–∞ –¥–ª—è –±–∞–∑—ã
DB_PATH = "furry_cache.db"

@loader.tds
class FurryCacheMod(loader.Module):
    """–ù—è—à–Ω—ã–π NSFW Furry –º–æ–¥ —Å –∫—ç—à–µ–º, —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –ª–∞–ø–∫–∞–º–∏ üêæ"""

    strings = {
        "name": "Furry NSFW (Gay++)",
        "fetching": "–ú—è—É~ —Ç—è–Ω—É –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∞—Ä—Ç üêæ",
        "fetching_remote": "–ú—É—Ä—Ä~ –∑–∞–≥—Ä—É–∂–∞—é –¥–æ 2000 —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–∞–Ω–∞–ª–∞‚Ä¶ –ø–æ—Ç–µ—Ä–ø–∏ –∫–æ—Ç–µ–π–∫—É~",
        "no_media": "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª, –¥–∞–∂–µ —Ö–≤–æ—Å—Ç–∏–∫ –Ω–µ –≤–∏–¥–Ω–æ :(",
        "error": "–£–ø—Å... —á—Ç–æ-—Ç–æ –ø–æ–ª–æ–º–∞–ª–æ—Å—å üß®",
        "cleared": "–ö–µ—à –æ—á–∏—â–µ–Ω! –ß–∏—Å—Ç–æ –∫–∞–∫ –≤ –≤–∞–Ω–Ω–æ–π –ø–æ—Å–ª–µ —Ç–µ–±—è üõÅ",
        "info": "üì¶ –í –∫–µ—à–µ: <b>{}</b> –º–µ–¥–∏–∞\nüîÅ –ó–∞–ø—Ä–æ—Å–æ–≤: <b>{}</b>",
        "channel_error": "–ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç üòø",
        "access_denied": "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–∞—á–∞–ª–∞ –∑–∞–π—Ç–∏ –≤ –Ω–µ–≥–æ üö´"
    }

    def __init__(self):
        self._init_db()

    def _init_db(self):
        self._conn = sqlite3.connect(DB_PATH)
        cursor = self._conn.cursor()
        cursor.execute("""CREATE TABLE IF NOT EXISTS media (
            id INTEGER PRIMARY KEY,
            chat_id INTEGER,
            message_id INTEGER
        )""")
        cursor.execute("""CREATE TABLE IF NOT EXISTS stats (
            key TEXT PRIMARY KEY,
            value INTEGER
        )""")
        self._conn.commit()

    def _increment_stat(self, key):
        cursor = self._conn.cursor()
        cursor.execute("INSERT OR IGNORE INTO stats (key, value) VALUES (?, 0)", (key,))
        cursor.execute("UPDATE stats SET value = value + 1 WHERE key = ?", (key,))
        self._conn.commit()

    def _get_stat(self, key):
        cursor = self._conn.cursor()
        cursor.execute("SELECT value FROM stats WHERE key = ?", (key,))
        res = cursor.fetchone()
        return res[0] if res else 0

    def _get_channel(self):
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–∞–Ω–∞–ª–∞
        channels = [
            base64.b64decode("Z2V4Zm9yMjA=").decode("utf-8"),  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π
            "gexfor20",  # –µ—Å–ª–∏ base64 –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            "@gexfor20"  # —Å @
        ]
        return channels

    async def _get_available_channel(self):
        """–ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–∞–Ω–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞"""
        channels = self._get_channel()
        
        for channel_name in channels:
            try:
                channel = await self.client.get_entity(channel_name)
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–∞–Ω–∞–ª: {channel_name}")
                return channel
            except (ChannelPrivateError, ChannelInvalidError, PeerIdInvalidError, ValueError) as e:
                logger.warning(f"‚ùå –ö–∞–Ω–∞–ª {channel_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                continue
        
        return None

    async def _fetch_all_messages(self, channel, max_messages=2000):
        all_media = []
        offset_id = 0
        limit = 100
        total_loaded = 0
        
        try:
            while total_loaded < max_messages:
                messages = await self.client.get_messages(channel, limit=limit, offset_id=offset_id)
                if not messages:
                    break
                    
                for msg in messages:
                    if msg.media:
                        all_media.append((msg.chat_id, msg.id))
                        
                total_loaded += len(messages)
                if messages:
                    offset_id = messages[-1].id
                await asyncio.sleep(0.1)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            
        logger.info(f"üîÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {total_loaded} —Å–æ–æ–±—â–µ–Ω–∏–π, –∏–∑ –Ω–∏—Ö —Å –º–µ–¥–∏–∞: {len(all_media)}")
        return all_media

    async def _load_cache_if_empty(self, message):
        cursor = self._conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM media")
        count = cursor.fetchone()[0]
        
        if count == 0:
            await utils.answer(message, self.strings("fetching_remote"))
            
            # –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–∞–Ω–∞–ª
            channel = await self._get_available_channel()
            if not channel:
                await utils.answer(message, self.strings("channel_error"))
                return False
                
            try:
                media = await self._fetch_all_messages(channel, max_messages=2000)
                if media:
                    cursor.executemany("INSERT OR IGNORE INTO media (chat_id, message_id) VALUES (?, ?)", media)
                    self._conn.commit()
                    logger.info(f"‚úÖ –ó–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω–æ {len(media)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                else:
                    logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–µ–¥–∏–∞ –≤ –∫–∞–Ω–∞–ª–µ")
                    
            except (ChannelPrivateError, ChannelInvalidError) as e:
                await utils.answer(message, self.strings("access_denied"))
                logger.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É: {e}")
                return False
            except Exception as e:
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
                return False
                
        return True

    async def furrcmd(self, message: Message):
        """–î–∞—ë—Ç —Ç–µ–±–µ –ø–æ—Ä—Ü–∏—é –ø—É—à–∏—Å—Ç–æ–≥–æ –∫—Ä–∏–Ω–∂–∞ –∏–∑ –±–∞–∑—ã, –Ω–µ –ø–∞–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ üê±‚Äçüë§"""
        try:
            await utils.answer(message, self.strings("fetching"))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–µ—à
            if not await self._load_cache_if_empty(message):
                return

            cursor = self._conn.cursor()
            cursor.execute("SELECT chat_id, message_id FROM media")
            rows = cursor.fetchall()

            if not rows:
                await utils.answer(message, self.strings("no_media"))
                return

            selected = random.choice(rows)
            chat_id, msg_id = selected

            self._increment_stat("used")

            try:
                msg = await self.client.get_messages(chat_id, ids=msg_id)
                if msg and msg.media:
                    file = await self.client.download_media(msg.media)
                    if file:
                        await self.client.send_file(message.chat_id, file, caption=msg.message or "")
                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        try:
                            os.remove(file)
                        except:
                            pass
                    else:
                        await utils.answer(message, self.strings("no_media"))
                else:
                    await utils.answer(message, self.strings("no_media"))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id}: {e}")
                await utils.answer(message, self.strings("no_media"))

        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ furrcmd: %s", e)
            await utils.answer(message, self.strings("error"))

    async def furrinfocmd(self, message: Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ —Ç—ã –Ω–∞—Å–æ–±–∏—Ä–∞–ª –≤ —Å–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∞—Ä—Ç—Ñ—É—Ä—Ä–∏"""
        cursor = self._conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM media")
        count = cursor.fetchone()[0]
        uses = self._get_stat("used")
        await utils.answer(message, self.strings("info").format(count, uses))

    async def furrclearcmd(self, message: Message):
        """–¢—ã —Ç–∞–∫–æ–π: '–Ø —É—Å—Ç–∞–ª –æ—Ç —ç—Ç–∏—Ö –∞—Ä—Ç–æ–≤', –∏ –≤—Å—ë —Å—Ç–∏—Ä–∞–µ—Ç—Å—è –∫–∞–∫ —Å–ª—ë–∑—ã –Ω–∞ –ª–∞–ø–∫–∞—Ö"""
        cursor = self._conn.cursor()
        cursor.execute("DELETE FROM media")
        cursor.execute("DELETE FROM stats")  # –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._conn.commit()
        await utils.answer(message, self.strings("cleared"))